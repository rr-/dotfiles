#!/usr/bin/env python3
import argparse
from subprocess import check_call, check_output

PROTECT = [
    "main",
    "develop",
    "master",
    "staging",
]


def should_keep(branch_name: str) -> bool:
    if branch_name in PROTECT:
        return True

    new_commits = check_output(
        [
            "git",
            "log",
            "-1",
            "--since",
            "2 weeks ago",
            "-s",
            branch_name,
            "--format=%H",
        ],
        text=True,
    ).splitlines()

    return len(new_commits) > 0


def get_branch_names() -> list[str]:
    branch_names = check_output(
        [
            "git",
            "branch",
            "-l",
            "--all",
            "--format",
            "%(refname)",
        ],
        text=True,
    ).splitlines()

    return sorted(
        set(
            line.split("/")[-1]
            for line in branch_names
            if not line.endswith("/HEAD")
        )
    )


def delete_branches(branch_names: list[str]) -> None:
    if branch_names:
        check_call(["git", "branch", "-D"] + branch_names)
        check_call(["git", "push", "origin", "--delete"] + branch_names)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d",
        "--dry-run",
        action="store_true",
        help="Don't delete any branches",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()

    branch_names_all = get_branch_names()
    branch_names_to_delete: list[str] = []
    for branch_name in branch_names_all:
        if should_keep(branch_name):
            print("Keeping", branch_name)
        else:
            print("Deleting", branch_name)
            branch_names_to_delete.append(branch_name)

    if not args.dry_run:
        delete_branches(branch_names_to_delete)


if __name__ == "__main__":
    main()
