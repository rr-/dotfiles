#!/usr/bin/env python3.10
# A wrapper around MPV optimized for images.
# Used mostly to interact with vifm and shell to filter out non-images.
import argparse
import os
import re
import tempfile
from pathlib import Path
from subprocess import run

MANAGED_EXTENSIONS = {
    "jpg",
    "jpeg",
    "jfif",
    "gif",
    "png",
    "tga",
    "bmp",
    "webm",
    "webp",
    "mkv",
    "mp4",
}


def parse_args():
    parser = argparse.ArgumentParser(description="Run mpv as image viewer")
    parser.add_argument(
        "-s",
        "--select",
        dest="selected_path",
        type=Path,
        help="Which file to preselect",
    )
    parser.add_argument(
        "-r",
        "--recursive",
        action="store_true",
        help="Scan directories recursively",
    )
    parser.add_argument(
        metavar="PATH",
        nargs="*",
        dest="paths",
        type=str,
        help="path to the image or a directory",
        default=None,
    )
    args, unknown_args = parser.parse_known_args()

    if args.selected_path:
        args.selected_path = args.selected_path.expanduser().resolve()

    if args.paths:
        args.paths = [
            path
            if path.startswith("http")
            else Path(path).expanduser().resolve()
            for path in args.paths
        ]
    else:
        if args.selected_path is not None:
            args.paths = [args.selected_path.parent]
        else:
            args.paths = [Path().resolve()]

    return args, unknown_args


def gather_playlist(paths, recursive):
    def scan(path, depth=0):
        if path.is_dir():
            if recursive or not depth:
                for subpath in path.iterdir():
                    yield from scan(subpath, depth + 1)
        elif path.is_file():
            ext = path.suffix.lower().lstrip(".")
            if ext in MANAGED_EXTENSIONS or not depth:
                yield path

    for path in paths:
        if isinstance(path, Path):
            yield from scan(path)
        else:
            yield path


def sort_playlist(playlist):
    def convert(text):
        return int(text) if text.isdigit() else text

    playlist.sort(
        key=lambda key: [convert(c) for c in re.split(r"(\d+)", str(key))]
    )


def main():
    args, unknown_args = parse_args()
    config_dir = Path("~/.config/mpi").expanduser()

    playlist = list(gather_playlist(args.paths, args.recursive))
    if args.selected_path:
        playlist.append(args.selected_path)
    playlist = list(set(playlist))  # remove duplicates
    sort_playlist(playlist)

    playlist_pos = (
        playlist.index(args.selected_path) if args.selected_path else 0
    )

    # write the playlist
    with tempfile.NamedTemporaryFile(
        delete=False, mode="w", encoding="utf-8"
    ) as handle:
        handle.write("\n".join(str(path) for path in playlist))

    try:
        run(
            [
                "mpv",
                f"--config-dir={config_dir}",
                f"--playlist={handle.name}",
                f"--playlist-start={playlist_pos}",
            ]
            + unknown_args
        )
    finally:
        os.unlink(handle.name)


if __name__ == "__main__":
    main()
