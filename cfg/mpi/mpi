#!/bin/python3
# A wrapper around MPV optimized for images.
# Used mostly to interact with vifm and shell to filter out non-images.

import argparse
import os
import re
import tempfile
from subprocess import run

MANAGED_EXTENSIONS = [
    'jpg', 'jpeg', 'jfif', 'gif', 'png', 'tga', 'bmp',
    'webm', 'mkv', 'mp4']


def parse_args():
    ''' Read the user arguments. '''

    parser = argparse.ArgumentParser(description='Run mpv as image viewer')
    parser.add_argument(
        '-s', '--select', dest='selected_path',
        help='Which file to preselect')
    parser.add_argument(
        metavar='PATH', nargs='*', dest='paths',
        help='path to the image or a directory', default=None)
    args, unknown_args = parser.parse_known_args()

    # decorate the user arguments
    if args.selected_path:
        args.selected_path = os.path.abspath(args.selected_path)
    if not args.paths:
        if args.selected_path is not None:
            args.paths = [os.path.dirname(args.selected_path)]
        else:
            args.paths = ['.']
    args.paths = [os.path.abspath(path) for path in args.paths]

    return args, unknown_args


def main():
    args, unknown_args = parse_args()

    # compose the playlist
    playlist = []
    for path in args.paths:
        if os.path.isdir(path):
            for entry in os.scandir(path):
                if not entry.is_file:
                    continue
                ext = os.path.splitext(entry.path)[1].lstrip('.').lower()
                if ext in MANAGED_EXTENSIONS:
                    playlist.append(entry.path)
        elif os.path.isfile(path):
            playlist.append(path)
    if args.selected_path:
        playlist.append(args.selected_path)

    # remove the duplicates from the playlist
    playlist = list(set(playlist))

    # sort the playlist, get selection position
    def convert(text):
        return int(text) if text.isdigit() else text.lower()

    playlist.sort(
        key=lambda key: [convert(c) for c in re.split('([0-9]+)', key)])
    if args.selected_path:
        playlist_pos = playlist.index(args.selected_path)
    else:
        playlist_pos = 0

    # write the playlist
    with tempfile.NamedTemporaryFile(delete=False, mode='wb') as handle:
        handle.write('\n'.join(playlist).encode('utf-8'))
        handle.close()

        try:
            # run mpv
            run([
                'mpv',
                '--config-dir=%s' % os.path.expanduser('~/.config/mpi'),
                '--playlist=%s' % handle.name,
                '--playlist-start=%d' % playlist_pos] + unknown_args)
        finally:
            os.unlink(handle.name)


if __name__ == '__main__':
    main()
