#
# executing various programs
#

# dmenu (a program launcher)
super + {r, d}
    dmenu_run

# switch Polishâ†”Japanese
super + n
    kb

# focus or spawn local terminal with tmux
alt + ctrl + bracketleft
    run_or_raise -cn local_terminal -p "urxvt -name local_terminal -e zsh -ilc 'tmux new-session -As work'"

# focus and spawn local terminal with tmux
super + Return
    xdotool search --classname local_terminal windowactivate; \
    if [ $? -ne 0 ]; then; \
        urxvt -name local_terminal -e zsh -ilc 'if tmux has-session -t work &>/dev/null; then tmux new-window -t work:; tmux attach-session -t work; else tmux new-session -s work; fi'; \
    else; \
        tmux new-window -t work; \
    fi

# spawn plain terminal
alt + ctrl + shift + bracketleft
    urxvt

# focus or spawn remote terminal
alt + ctrl + bracketright
    run_or_raise -cn remote_terminal -p "urxvt -name remote_terminal -e zsh -ilc 'ssh cyclone -t "'"zsh -ilc tmux\ new-session\ -As\ work"'"'"

# spawn plain remote terminal
alt + ctrl + shift + bracketright
    urxvt -e zsh -ilc 'ssh cyclone'

# focus or spawn irc
alt + ctrl + m
    run_or_raise -cn remote_irc -p "urxvt -name remote_irc -e zsh -ilc 'ssh cyclone -t "'"zsh -ilc tmux\ a\ -t\ irc"'"'"

# focus or spawn irc, and detach all other sessions
alt + ctrl + shift + m
    run_or_raise -cn remote_irc -p "urxvt -name remote_irc -e zsh -ilc 'ssh cyclone -t "'"zsh -ilc tmux\ a\ -d\ -t\ irc"'"'"

# spawn web browser
alt + ctrl + semicolon
    run_or_raise -n 'Mozilla Firefox|Vimperator|Qutebrowser' -p "xdg-open 'about:blank'"

# focus or spawn scratchpad
alt + ctrl + n
    run_or_raise -cn local_terminal -p "urxvt -name local_terminal -e zsh -ilc 'tmux new-session -As work -n scratchpad nvim'"; \
    tmux select-window -t work:scratchpad || tmux new-window -t work: -n scratchpad nvim

# spawn file manager within local terminal
super + e
    run_or_raise -cn local_terminal -p "urxvt -name local_terminal -e zsh -ilc 'tmux new-session -As work -n vifm vifm'"; \
    tmux select-window -t work:vifm || tmux new-window -t work: -n vifm vifm



#
# music and audio
#

# volume up and down
super + {x,X}
    dir={+,-}; \
    amixer -D pulse set Master 1%$dir unmute

# previous and next track
super + {c,C}
    CMD={next,prev}; \
    mpc $CMD || mpvmc $CMD

# toggle play
super + v
    mpc toggle || mpvmc play-pause

# copy current song title to clipboard
super + V
    zsh -ilc 'mpc||mpvmc print --format="[[[%artist%|%albumartist%] - ]%title%|%name%]"|head -n1|tr -d "\n"|clip'

# toggle random
super + b
    mpc random || mpvmc toggle-random

# seek backward and forward
alt + shift + ctrl + {h,l}
    NUM={-,+}10; \
    mpc seek $NUM || mpvmc seek "$NUM"



#
# window manager
#

# transparency
super + {button5,button4}
    compton-trans -c {-,+}5
super + {z,Z}
    compton-trans -c {-,+}5

# close active window
super + q
    bspc node -c

# send active window to given another workspace
super + shift + {grave,1-9,0,minus}
    TARGET={IM,1-9,10,IM}; \
    ID=$(xdo id); \
    bspc node -d $TARGET && bspc node -f $ID

# focus workspace
super + {grave,1-9,0,minus}
    bspc desktop -f {IM,1-9,10,IM}

# focus window in given direction
super + {h,j,k,l}
    DIR={west,south,north,east}; \
    bspc node -f $DIR || ( bspc monitor -f $DIR; bspc node -f @/1.floating )

# swap window with another one in given direction
super + shift + {h,j,k,l}
    bspc node -s {west,south,north,east}.local

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
    bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
    bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# set current window as floating
super + s
    toggle_state floating

# set current window as fullscreen
super + f
    toggle_state fullscreen

# cycle between desktop layouts
super + shift + f
    bspc desktop -l {tiled,monocle}

# toggle window gaps
super + o
    if test $(bspc config -d focused window_gap) -eq 0; then; \
        bspc config -d focused window_gap $(cat /tmp/bspc_window_gap); \
    else; \
        bspc config -d focused window_gap >/tmp/bspc_window_gap; \
        bspc config -d focused window_gap 0; \
    fi

# toggle window borders
super + shift + o
    if test $(bspc config -d focused border_width) -eq 0; then; \
        bspc config -d focused border_width $(cat /tmp/bspc_border_width); \
    else; \
        bspc config -d focused border_width >/tmp/bspc_border_width; \
        bspc config -d focused border_width 0; \
    fi

# focus window with regard to focus history
super + {bracketleft,bracketright}
    bspc control --record-history off; \
    bspc node {older,newer} -f; \
    bspc control --record-history on

# reload sxhkd configuration
alt + F12
    killall -SIGUSR1 sxhkd

alt + shift + F12
    bash -c '~/.config/bspwm/bspwmrc'

# screenshots
super + i
    bash -c 'shot -i --output ~/ && mpv ~/.local/share/beep-shot.mp3'
super + shift + i
    bash -c 'shot -W -i --output ~/ && mpv ~/.local/share/beep-shot.mp3'
super + alt + i
    bash -c 'shot -M -i --output ~/ && mpv ~/.local/share/beep-shot.mp3'
