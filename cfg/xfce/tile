#!/usr/bin/env python3
# requires: Xlib
import argparse
from collections.abc import Iterable
from decimal import Decimal
from typing import Any, cast

import Xlib.ext.randr
from Xlib import X, Xatom
from Xlib.display import Display
from Xlib.protocol.event import ClientMessage
from Xlib.xobject.drawable import Window

DEFAULT_RATIO = Decimal("0.5")


def calculate_partitions(
    x: int,
    y: int,
    width: int,
    height: int,
    n: int,
    ratio: Decimal,
    gaps: int = 0,
) -> Iterable[tuple[int, int, int, int]]:
    """
    Split the rectangle (x, y, width, height) into `n` sub-rectangles.

    If width ≥ height we slice vertically (left → right); otherwise we
    slice horizontally (top → bottom).

    `ratio` governs how big each non-final slice is compared to what’s
    still unallocated. `gaps` is the empty space (in pixels) inserted
    *between* consecutive slices. Gaps are not added before the first
    or after the last slice.

    Yields
    ------
    Tuples of (x1, y1, x2, y2) for each partition.
    """
    x1, y1 = x, y
    x2, y2 = x + width, y + height

    # How many gaps will ultimately live on the cutting axis?
    total_gap = gaps * (n - 1)

    for i in range(n):
        last = i == n - 1

        if width >= height:
            # === horizontal (left-to-right) cuts ===
            # Remaining pixel budget *excluding* future gaps:
            usable = width - total_gap
            part_w = usable if last else int(Decimal(usable) * ratio)
            yield (x1, y1, x1 + part_w, y2)

            # Advance cursor: slice + *one* gap (unless this was last)
            x1 += part_w + (gaps if not last else 0)
            width -= part_w
        else:
            # === vertical (top-to-bottom) cuts ===
            usable = height - total_gap
            part_h = usable if last else int(Decimal(usable) * ratio)
            yield (x1, y1, x2, y1 + part_h)

            y1 += part_h + (gaps if not last else 0)
            height -= part_h

        # One gap has now been spent (except after final slice)
        if not last:
            total_gap -= gaps


def get_active_monitor_working_area(
    disp: Display,
) -> tuple[int, int, int, int] | None:
    root = disp.screen().root

    # Get XRandR screen resources
    res = Xlib.ext.randr.get_screen_resources(root)

    # Get the primary output
    outputs = {
        output: Xlib.ext.randr.get_output_info(
            disp, output, res.config_timestamp
        )
        for output in Xlib.ext.randr.get_screen_resources(root).outputs
    }

    primary_output = Xlib.ext.randr.get_output_primary(root).output
    if not primary_output:
        for output, info in outputs.items():
            print(
                f"id={output:<3d} crtc:{info.crtc:<3d} size={info.mm_width}×{info.mm_height}"
            )
            if info.crtc and (
                primary_output not in outputs
                or info.mm_width > outputs[primary_output].mm_width
            ):
                primary_output = output

    try:
        primary_output_info = outputs[primary_output]
    except KeyError:
        return None

    print(primary_output_info.crtc)
    if primary_output_info.crtc == 0:
        return None

    # Get the geometry of the primary monitor
    crtc_info = Xlib.ext.randr.get_crtc_info(
        disp, primary_output_info.crtc, res.config_timestamp
    )
    monitor_x, monitor_y, monitor_w, monitor_h = (
        crtc_info.x,
        crtc_info.y,
        crtc_info.width,
        crtc_info.height,
    )

    # Get the window manager struts (_NET_WM_STRUT and _NET_WM_STRUT_PARTIAL)
    strut_atom = disp.intern_atom("_NET_WM_STRUT", True)
    strut_partial_atom = disp.intern_atom("_NET_WM_STRUT_PARTIAL", True)

    def get_struts(
        window: Window, strut_atom: int, strut_partial_atom: int
    ) -> list[int] | None:
        try:
            struts = window.get_property(strut_atom, Xatom.CARDINAL, 0, 4)
            if not struts:
                struts = window.get_property(
                    strut_partial_atom, Xatom.CARDINAL, 0, 12
                )

            if struts:
                return cast(list[int], struts.value)
        except Xlib.error.XError:
            pass

        return None

    def traverse_windows(
        window: Window, strut_atom: int, strut_partial_atom: int
    ) -> Iterable[list[int]]:
        struts = get_struts(window, strut_atom, strut_partial_atom)
        if struts:
            yield struts

        try:
            children = window.query_tree().children
            for child in children:
                yield from traverse_windows(
                    child, strut_atom, strut_partial_atom
                )
        except Xlib.error.XError:
            pass

    left, right, top, bottom = 0, 0, 0, 0

    for struts in traverse_windows(root, strut_atom, strut_partial_atom):
        if len(struts) >= 4:
            left = max(left, max(struts[0] - monitor_x, 0))
            top = max(top, max(struts[2] - monitor_y, 0))
            right = max(right, max(struts[1] - monitor_x - monitor_w, 0))
            bottom = max(bottom, max(struts[3] - monitor_y - monitor_h, 0))

    # Calculate working area within the primary monitor
    work_area_x = monitor_x + left
    work_area_y = monitor_y + top
    work_area_width = monitor_w - left - right
    work_area_height = monitor_h - top - bottom

    return work_area_x, work_area_y, work_area_width, work_area_height


def get_desktop_geometry(
    disp: Display, desktop_id: int
) -> tuple[int, int, int, int]:
    root = disp.screen().root
    result: list[int] | None = get_window_property_values(
        disp, "_NET_WORKAREA", root
    )
    assert result
    left, right, top, bottom = result[desktop_id * 4 : desktop_id * 4 + 4]
    return (left, right, top, bottom)


def get_window_extents(
    disp: Display, window_id: int
) -> tuple[int, int, int, int]:
    result = get_window_property_values(disp, "_NET_FRAME_EXTENTS", window_id)
    if result is None:
        raise RuntimeError("cannot retrieve window extents")
    (
        left,
        right,
        top,
        bottom,
    ) = result
    return left, right, top, bottom


def unmaximize_window(
    disp: Display, window_id: int, dry_run: bool = False
) -> None:
    if dry_run:
        return
    root = disp.screen().root
    atoms = [
        disp.intern_atom("_NET_WM_STATE_FULLSCREEN"),
        disp.intern_atom("_NET_WM_STATE_MAXIMIZED_HORZ"),
        disp.intern_atom("_NET_WM_STATE_MAXIMIZED_VERT"),
    ]
    for atom in atoms:
        event = ClientMessage(
            window=window_id,
            client_type=disp.intern_atom("_NET_WM_STATE"),
            data=(32, [0, atom, 0, 0, 0]),
        )
        root.send_event(event, event_mask=X.SubstructureNotifyMask)


def partition_desktop_windows(
    disp: Display,
    desktop_id: int,
    ratio: Decimal,
    dry_run: bool = False,
    gaps: int = 0,
) -> None:
    desktop_windows = list(get_desktop_window_ids(disp, desktop_id))

    workspace = get_active_monitor_working_area(disp)
    if not workspace:
        workspace = get_desktop_geometry(disp, desktop_id)

    (
        workspace_x,
        workspace_y,
        workspace_width,
        workspace_height,
    ) = workspace

    for window_id in desktop_windows:
        unmaximize_window(disp, window_id, dry_run=dry_run)

    disp.flush()

    for window_id, (x1, y1, x2, y2) in zip(
        desktop_windows,
        calculate_partitions(
            workspace_x + gaps,
            workspace_y + gaps,
            workspace_width - gaps * 2,
            workspace_height - gaps * 2,
            n=len(desktop_windows),
            ratio=ratio,
            gaps=gaps,
        ),
    ):
        (
            border_left,
            border_right,
            border_top,
            border_bottom,
        ) = get_window_extents(disp, window_id)

        set_window_geometry(
            disp,
            window_id,
            x=x1 + border_left,
            y=y1 + border_top,
            width=x2 - x1 - border_left - border_right,
            height=y2 - y1 - border_top - border_bottom,
            dry_run=dry_run,
        )


def set_window_geometry(
    disp: Display,
    window_id: int,
    x: int,
    y: int,
    width: int,
    height: int,
    dry_run: bool = False,
) -> None:
    window = disp.create_resource_object("window", window_id)
    if dry_run:
        print(window_id, x, y, width, height)
    else:
        window.configure(x=x, y=y, width=width, height=height)


def get_property(disp: Display, name: str) -> Any:
    atom = disp.intern_atom(name)
    return disp.screen().root.get_full_property(atom, 0)


def get_window_property(disp: Display, name: str, window_id: int) -> Any:
    atom = disp.intern_atom(name)
    window = disp.create_resource_object("window", window_id)
    return window.get_full_property(atom, 0)


def get_window_property_value(
    disp: Display, name: str, window_id: int
) -> int | None:
    if result := get_window_property(disp, name, window_id):
        return cast(int, result.value[0])
    return None


def get_window_property_values(
    disp: Display, name: str, window_id: int
) -> list[int] | None:
    if result := get_window_property(disp, name, window_id):
        return list(result.value)
    return None


def get_desktop_id(disp: Display, window_id: int) -> int | None:
    return get_window_property_value(disp, "_NET_WM_DESKTOP", window_id)


def get_window_ids(disp: Display) -> list[int]:
    return cast(list[int], get_property(disp, "_NET_CLIENT_LIST").value)


def get_desktop_window_ids(disp: Display, desktop_id: int) -> Iterable[int]:
    for window_id in get_window_ids(disp):
        if get_desktop_id(disp, window_id) == desktop_id:
            yield window_id


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("-r", "--ratio", type=Decimal, default=DEFAULT_RATIO)
    parser.add_argument("-d", "--dry-run", action="store_true")
    parser.add_argument("-g", "--gaps", type=int, default=96)
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    disp = Display()

    active_window_id = disp.get_input_focus().focus.id
    if (desktop_id := get_desktop_id(disp, active_window_id)) is not None:
        partition_desktop_windows(
            disp,
            desktop_id,
            ratio=args.ratio,
            dry_run=args.dry_run,
            gaps=args.gaps,
        )

    disp.flush()
    disp.close()


if __name__ == "__main__":
    main()
