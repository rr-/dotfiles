# autocomplete
autoload -Uz compinit                   # initialize autocompletion engine
compinit -i                             # initialize autocompletion engine (2)
zstyle ':completion:*' matcher-list \
    'm:{a-zA-Z}={A-Za-z}' \
    '+l:|=* r:|=*'                      # recursive
setopt NO_NOMATCH                       # if extended glob fails, run cmd as-is
setopt NO_CASE_GLOB                     # ignore case in glob searches
setopt nullglob                         # nonexisting wildcards expand to ''

# miscellaneous
unsetopt beep                           # disable beep on errors
setopt correct                          # enable [nyae] correction
setopt auto_cd                          # "cd /usr/" becomes "/usr/"
setopt nocasematch                      # regex should work case-insensitive
setopt magic_equal_subst                # enable path autocompletion after =
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'      # what kill-word should delete

# history
export HISTFILE=~/.config/zsh/history   # set path to history file
export HISTSIZE=10000                   # how many entries in history (memory)
export SAVEHIST=10000                   # how many entries in history (hdd)
export HISTORY_IGNORE='(yum|tmp|gel)'   # don't remember certain commands
setopt appendhistory                    # append lines (for concurrent sessions)
setopt HIST_IGNORE_ALL_DUPS             # ignore even interleaved duplicates

# basic key bindings for interactive shells
if [[ $- == *i* ]]; then
    bindkey -e                              # use Emacs keybindings
    stty -ixon                              # reclaim ctrl+q for Vim
    stty stop undef                         # reclaim ctrl+s for Vim
fi

# key bindings for terminal emulator
if [ "$TERM" =~ rxvt ]; then
    bindkey "\e[3~"   delete-char           # delete
    bindkey '\e[1~'   beginning-of-line     # home and ctrl+home
    bindkey '\e[4~'   end-of-line           # end and ctrl+end
    bindkey '^H'      backward-kill-word    # ctrl+backspace
    bindkey "^[3^"    kill-word             # ctrl+delete
    bindkey '\eOd'    backward-word         # ctrl+left
    bindkey '\eOc'    forward-word          # ctrl+right

    bindkey '\e[1;5I' 'beep'                # disable ctrl+tab
    bindkey '\e[1;6I' 'beep'                # disable ctrl+shift+tab
else
    bindkey "\e[3~"   delete-char           # delete
    bindkey '\eOH'    beginning-of-line     # home
    bindkey '\eOF'    end-of-line           # end
    bindkey ';5H'     beginning-of-line     # ctrl+home
    bindkey ';5F'     end-of-line           # ctrl+end
    bindkey '^_'      backward-kill-word    # ctrl+backspace
    bindkey "\e[3;5~" kill-word             # ctrl+delete
    bindkey ';5D'     backward-word         # ctrl+left
    bindkey ';5C'     forward-word          # ctrl+right

    bindkey '\e[1;5I' 'beep'                # disable ctrl+tab
    bindkey '\e[1;6I' 'beep'                # disable ctrl+shift+tab
fi

    # necessary for the above to work
    if [[ -n ${terminfo[smkx]} ]] && [[ -n ${terminfo[rmkx]} ]]; then
        function zle-line-init () {
            echoti smkx
        }
        function zle-line-finish () {
            echoti rmkx
        }
        zle -N zle-line-init
        zle -N zle-line-finish
    fi

# command prompt
function make_ps1 () {
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        PS1="$(tput setaf 39)"
    else
        PS1="$(tput setaf 203)"
    fi
    # user@host
    PS1+='%n@%M'

    # colon
    PS1+="$(tput setaf 7):"

    # path relative to $HOME
    PS1+="$(tput setaf 2)%~"

    # colored $ depending on last exit code
    PS1+=$'%(?.%{\e[0;37m%}.%{\e[38;5;203m%})$ '

    # reset colors
    PS1+="$(tput sgr0)"

    # add titlebar user@host:~/
    if [[ "$TERM" != linux ]]; then
        PS1+=$'%{\e]0;%n@%M:%~\007%}'
    fi
}
make_ps1

# config fzf
if [ -f ~/.fzf.zsh ]; then
    export FZF_DEFAULT_COMMAND='ag -g ""'
    export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --inline-info --color=dark"
    source ~/.fzf.zsh
    bindkey '\C-t' transpose-chars
    bindkey '\C-o' fzf-file-widget
fi
