#!/usr/bin/env python3
import socket
import sys
from pathlib import Path
from subprocess import run
from typing import TypedDict

try:
    import yaml

    HAS_YAML = True
except ImportError:
    HAS_YAML = False

SESSIONS_PATH = Path("~/.config/tmux/sessions.yml").expanduser()


class WindowSpec(TypedDict):
    window_name: str
    cwd: str


class SessionSpec(TypedDict):
    name: str
    windows: list[WindowSpec]


Spec = list[SessionSpec]


def renumber_sessions() -> None:
    """Make sure that numeric sessions names appear in linear order."""
    session_names = run(
        ["tmux", "list-sessions", "-F", "#S"], capture_output=True, text=True
    ).stdout.splitlines()
    numeric_sessions = [int(name) for name in session_names if name.isdigit()]
    for new_name, old_name in enumerate(numeric_sessions, 1):
        run(["tmux", "rename", "-t", str(old_name), str(new_name)])


def recreate_session(spec: SessionSpec) -> None:
    windows_to_create = spec["windows"]
    if not windows_to_create:
        return

    result = run(
        ["tmux", "list-windows", "-t", spec["name"], "-F", "#{window_name}"],
        capture_output=True,
        text=True,
    )

    existing_windows: list[str] = []
    if result.returncode == 0:
        existing_windows = result.stdout.splitlines()

    if existing_windows:
        last_created_window = spec["name"] + ":" + existing_windows[-1]
    else:
        first_window = windows_to_create.pop(0)
        last_created_window = spec["name"] + ":" + first_window["window_name"]
        run(
            [
                "tmux",
                "new-session",
                "-d",
                "-s",
                spec["name"],
                "-n",
                first_window["window_name"],
                "-c",
                Path(first_window["cwd"]).expanduser(),
            ]
        )

    for window in windows_to_create:
        if window["window_name"] not in existing_windows:
            run(
                [
                    "tmux",
                    "new-window",
                    "-d",
                    "-a",
                    "-t",
                    last_created_window,
                    "-n",
                    window["window_name"],
                    "-c",
                    Path(window["cwd"]).expanduser(),
                ]
            )
        last_created_window = spec["name"] + ":" + window["window_name"]


def recreate_sessions() -> None:
    """Recreate sessions that should be persisted across machines."""
    if not HAS_YAML:
        print("pyyaml module not installed", file=sys.stderr)
        return

    if not SESSIONS_PATH.exists():
        print("sessions file does not exist", file=sys.stderr)
        return

    config = yaml.safe_load(SESSIONS_PATH.read_text())
    machine_name = socket.gethostname()

    specs = config.get(machine_name, [])
    for spec in specs:
        recreate_session(spec)


def main() -> None:
    renumber_sessions()
    recreate_sessions()


if __name__ == "__main__":
    main()
