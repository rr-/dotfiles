#!/bin/python3
# Downloads images crawled by cron on the server to local directory.
# Additionally, distributes the images to specific folders, and filters out
# small images.

import re
import argparse
from os import scandir, path, makedirs, rmdir, unlink, rename
from subprocess import run
from socket import gethostname
from PIL import Image
from dotfiles import logging

logger = logging.getLogger(__name__)

LOCAL_HOST = 'tornado'
REMOTE_HOST = 'burza'

LOCAL_ROOT_DIR = path.expanduser('~/img/net/')
TRANSIT_ROOT_DIR = path.expanduser('~/hub/img/')
REMOTE_ROOT_DIR = path.expanduser('~/hub/img/')


def _parse_args():
    description = (
        'Downloads, filters and organizes into directories ' +
        'images crawled by cron job.')
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument(
        '--dry', action='store_true', help='don\'t do anything')
    parser.add_argument('--min-image-width', default=500, type=int)
    parser.add_argument('--min-image-height', default=500, type=int)
    return parser.parse_args()


def _find_directories_recursive(root_dir):
    ''' Returns all sub directories in DFS order '''
    stack = [root_dir]
    result = []
    while len(stack):
        dir_path = stack.pop(0)
        result.append(dir_path)
        for entry in scandir(dir_path):
            if entry.is_dir():
                stack.insert(0, entry.path)
    while len(result):
        yield result.pop()


def _find_files(root_dir):
    return [entry.path for entry in scandir(root_dir) if entry.is_file()]


def main():
    args = _parse_args()
    if gethostname() != LOCAL_HOST:
        raise RuntimeError('Must be run on %s' % LOCAL_HOST)

    run([
        'rsync',
        '--progress',
        '--whole-file',
        '-a',
        '--remove-source-files',
        '%s:%s' % (REMOTE_HOST, REMOTE_ROOT_DIR),
        TRANSIT_ROOT_DIR])

    min_image_area = args.min_image_width * args.min_image_height

    source_directories = list(_find_directories_recursive(TRANSIT_ROOT_DIR))
    for source_directory in source_directories:
        target_directory = path.join(
            LOCAL_ROOT_DIR, path.relpath(source_directory, TRANSIT_ROOT_DIR))
        target_directory = re.sub(
            r'[^\\/]*\.2chan\.net', '2chan', target_directory)
        target_directory = re.sub(
            r'[^\\/]*\.(4chan|4cdn)\.org', '4chan', target_directory)

        makedirs(target_directory, exist_ok=True)

        source_files = list(_find_files(source_directory))
        for source_file in source_files:
            target_file = path.join(
                target_directory, path.basename(source_file))

            try:
                with Image.open(source_file) as image:
                    width, height = image.size
                    if width * height < min_image_area:
                        logger.warning('%s: too small, ignoring', source_file)
                        if not args.dry:
                            unlink(source_file)
                        continue
            except:
                pass

            logger.info('%s: ok', source_file)
            if not args.dry:
                rename(source_file, target_file)

        if not args.dry:
            run(['distribute-files', target_directory, '--fill-last', '-v'])

        try:
            rmdir(source_directory)
        except OSError:
            pass


if __name__ == '__main__':
    main()
