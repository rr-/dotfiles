#!/usr/bin/env python3
# Moves images crawled by cron to a local directory.
# Additionally, distributes the images to specific folders, and filters out
# small images.

import argparse
import re
import typing as T
from pathlib import Path

from PIL import Image

from libdotfiles import logging

SOURCE_ROOT_DIR = Path("~/data.frost/img/net-queue").expanduser()
TARGET_ROOT_DIR = Path("~/data.frost/img/net/").expanduser()
SMALL_IMAGE_EXTENSIONS = {".png", ".jpg", ".jpeg"}


def parse_args() -> argparse.Namespace:
    description = (
        "Downloads, filters and organizes into directories "
        + "images crawled by cron job."
    )
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("--min-image-width", default=300, type=int)
    parser.add_argument("--min-image-height", default=300, type=int)
    parser.add_argument(
        "-d", "--dry-run", action="store_true", help="don't do anything"
    )
    return parser.parse_args()


def find_directories_recursive(root_dir: Path) -> T.Iterable[Path]:
    """Return all sub directories in a DFS order."""
    for entry in sorted(root_dir.iterdir(), key=lambda file: file.name):
        if entry.is_dir():
            yield from find_directories_recursive(entry)
            yield entry
    yield root_dir


def find_files(root_dir: Path) -> T.List[Path]:
    if not root_dir.exists():
        return []
    return [entry for entry in root_dir.iterdir() if entry.is_file()]


def is_image_too_small(source_path: Path, args: argparse.Namespace) -> bool:
    if not source_path.suffix.lower() in SMALL_IMAGE_EXTENSIONS:
        return False

    min_image_area = args.min_image_width * args.min_image_height
    try:
        with Image.open(source_path) as image:
            image_width, image_height = image.size
            image_area = image_width * image_height
            if image_area < min_image_area:
                return True
    except Exception:
        pass

    return False


def main() -> None:
    args = parse_args()

    for source_dir in find_directories_recursive(SOURCE_ROOT_DIR):
        target_dir = TARGET_ROOT_DIR / source_dir.relative_to(SOURCE_ROOT_DIR)
        target_dir = str(target_dir)
        target_dir = re.sub(r"([^\\/]*)\.2chan\.net", r"2chan/\1", target_dir)
        target_dir = re.sub(r"[^\\/]*\.(4chan|4cdn)\.org", "4chan", target_dir)
        target_dir = Path(target_dir)

        source_files = find_files(source_dir)
        if source_files:
            target_dir.mkdir(parents=True, exist_ok=True)

            for source_file in source_files:
                prefix = f"{source_file}"

                target_file = target_dir / source_file.name

                if is_image_too_small(source_file, args):
                    logging.warning(f"{prefix}: too small, ignoring")
                    if not args.dry_run:
                        source_file.unlink()
                    continue

                logging.info(f"{prefix}: ok (moving to {target_file}")
                if not args.dry_run:
                    try:
                        source_file.rename(target_file)
                    except OSError:
                        # most probably EXDEV
                        target_file.write_bytes(source_file.read_bytes())
                        source_file.unlink()

        try:
            source_dir.rmdir()
        except OSError:
            pass


if __name__ == "__main__":
    main()
