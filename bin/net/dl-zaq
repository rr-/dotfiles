#!/usr/bin/env python3
import argparse
import base64
import json
import os
import re
import tempfile
from pathlib import Path

import lxml.html
import requests
import tqdm

BUFFER_SIZE = 32 * 1024


def download_file(
    source_url: str, referer_url: str, target_path: Path
) -> None:
    if target_path.exists():
        print(f'"{target_path}" already exists, skipping')
        return

    response = requests.get(
        source_url, headers={"Referer": referer_url}, stream=True
    )
    total_size = int(response.headers.get("content-length", 0))
    target_path.parent.mkdir(exist_ok=True, parents=True)

    with tempfile.NamedTemporaryFile(
        dir=target_path.parent
    ) as handle, tqdm.tqdm(
        desc=target_path.name, total=total_size, unit="B", unit_scale=True
    ) as pbar:
        for chunk in response.iter_content(BUFFER_SIZE):
            handle.write(chunk)
            pbar.update(len(chunk))
        os.link(handle.name, target_path)


def download_video(page_url: str, directory: Path) -> None:
    response = requests.get(page_url)
    response.raise_for_status()
    document = lxml.html.fromstring(response.text)

    video_file_name = document.xpath(
        '//div[@id="video_player"]/@data-file-name'
    )[0]
    video_file_extension = document.xpath(
        '//div[@id="video_player"]/@data-file-extension'
    )[0]
    file_id = int(
        re.search(
            r"vid/(\d+)",
            document.xpath('//div[@id="video_player"]/@data-video-url')[0],
        ).group(1)
    )

    target_path = (directory / video_file_name).with_suffix(
        "." + video_file_extension
    )

    video_url = (
        "https://stream2.zaq2.pl/video_dummy/"
        + base64.b64encode(
            json.dumps(
                {
                    "fileID": file_id,
                    "checksum_id": file_id,
                    "premium": False,
                    "limit_rate_after": 7200,
                }
            ).encode()
        )
        .decode()
        .replace("=", ",")
        + "."
        + video_file_extension
    )

    download_file(
        source_url=video_url, referer_url=page_url, target_path=target_path
    )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("url", nargs="+")
    parser.add_argument(
        "-o", "--output", help="output directory", default=".", type=Path
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    output_dir = args.output.expanduser()
    for url in args.url:
        download_video(url, output_dir)


if __name__ == "__main__":
    try:
        main()
        exit(0)
    except RuntimeError as ex:
        print(ex)
        exit(1)
