#!/usr/bin/env python3
import os
import sys
import tempfile
import subprocess
import configargparse
import git  # GitPython


def parse_args():
    parser = configargparse.Parser()
    parser.add(
        '-c', '--config', metavar='PATH', is_config_file=True,
        help='config file path')
    parser.add_argument('--gist-id', required=True)
    parser.add_argument('file')
    return parser.parse_args()


def edit_interactively(path):
    result = subprocess.run([os.environ['EDITOR'] or 'vim', path])
    return result.returncode


def main():
    try:
        args = parse_args()
        repo_path = os.path.join(tempfile.gettempdir(), 'notes.git')

        if not os.path.exists(repo_path):
            url = f'git@github.com:{args.gist_id}.git'
            repo = git.Repo.clone_from(url, repo_path)
        else:
            repo = git.Repo(repo_path)

        if repo.is_dirty():
            raise RuntimeError('Repo is dirty, bailing out')

        if repo.active_branch.name != 'master':
            raise RuntimeError('Invalid branch, bailing out')

        path = os.path.join(repo_path, args.file)

        if not os.path.exists(path):
            raise RuntimeError(f'File "{path}" does not exist, bailing out')

        if edit_interactively(path) != 0:
            raise RuntimeError('Error while editing, bailing out')

        if repo.active_branch.name != 'master':
            raise RuntimeError('Branch changed in the meantime, bailing out')

        if not repo.is_dirty():
            raise Warning('Nothing changed, bailing out')

        if repo.untracked_files:
            raise RuntimeError(f'Untracked file "{path}", bailing out')

        changed = [item.a_path for item in repo.index.diff(None)]
        for path in changed:
            repo.index.add(changed)

        repo.index.commit('update')
        push_info = repo.remote().push(force=True)[0]
        print(push_info.summary.strip())

    except RuntimeError as ex:
        print(ex)
        sys.exit(1)
    except Warning as ex:
        print(ex)


if __name__ == '__main__':
    main()
