#!/usr/bin/env python3
# requires: pyyaml xdg
import argparse
import json
import re
import shlex
import sys
import time
from collections.abc import Callable
from datetime import datetime, timedelta
from pathlib import Path
from subprocess import check_call, check_output, run
from typing import TypedDict

import xdg
import yaml

from libdotfiles import logging

STATION_MAX_WAIT = timedelta(seconds=3)
CONFIG_PATH = Path(xdg.XDG_CONFIG_HOME) / "wifi.yml"
DEFAULT_WIFI_DEVICE = "wlan0"


def remove_ansi_escapes(source: str) -> str:
    return re.sub(r"\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])", "", source)


def poll(func: Callable[[], bool], max_wait: timedelta) -> bool:
    start_time = datetime.now()
    while datetime.now() - start_time < max_wait:
        if func():
            return True
        time.sleep(0.1)
    return False


class Network(TypedDict):
    ssid: str
    passphrase: str


class NetworkManager:
    def __init__(
        self,
        known_wifi_networks: list[Network],
        wifi_device: str = DEFAULT_WIFI_DEVICE,
    ) -> None:
        self.known_wifi_networks = known_wifi_networks
        self.wifi_device = wifi_device

    def start_systemd_services(self) -> None:
        check_call(["sudo", "systemctl", "start", "systemd-networkd"])
        check_call(["sudo", "systemctl", "start", "systemd-resolved"])
        self.wait_for_device_up()

    def wait_for_device_up(self) -> None:
        poll(
            lambda: self.get_station_info().get("State") == "connected",
            STATION_MAX_WAIT,
        )

    def wait_for_scan_finish(self) -> None:
        poll(
            lambda: self.get_station_info().get("Scanning") == "no",
            STATION_MAX_WAIT,
        )

    def scan_networks(self) -> None:
        try:
            check_call(["iwctl", "station", self.wifi_device, "scan"])
            self.wait_for_scan_finish()
        except Exception:
            pass

    def disconnect_wifi(self) -> None:
        check_call(["iwctl", "station", self.wifi_device, "disconnect"])

    def get_station_info(self) -> dict[str, str | None]:
        output_lines = (
            remove_ansi_escapes(
                run(
                    ["iwctl", "station", DEFAULT_WIFI_DEVICE, "show"],
                    capture_output=True,
                    text=True,
                ).stdout
            )
            .strip()
            .splitlines()
        )

        try:
            station = output_lines[0].strip().split(":")[1].strip()
        except IndexError:
            station = None

        properties: dict[str, str] = {}
        for line in output_lines[3:]:
            parts = re.split(r"\s{2,}", line.strip())
            if len(parts) == 2:
                property_name, property_value = map(str.strip, parts)
                properties[property_name] = property_value

        data = {"Station": station, **properties}

        return data

    def connect_wifi(self, ssid: str | None) -> Network | None:
        self.scan_networks()

        self.disconnect_wifi()
        if ssid is not None:
            networks = [
                network
                for network in self.known_wifi_networks
                if network["ssid"].strip().lower() == ssid.strip().lower()
            ]
        else:
            networks = self.known_wifi_networks

        if not networks:
            raise RuntimeError("no matching wifi network found")

        for network in networks:
            if self._try_connect_wifi_network(network):
                return network
        return None

    def _try_connect_wifi_network(self, network: Network) -> bool:
        result = run(
            [
                "iwctl",
                *(
                    ["--passphrase", passphrase]
                    if (passphrase := network.get("passphrase"))
                    else []
                ),
                "station",
                self.wifi_device,
                "connect",
                network["ssid"],
            ],
            check=False,
        )
        return result.returncode == 0

    def list_networks(self) -> None:
        check_call(["iwctl", "station", self.wifi_device, "get-networks"])


def get_wifi_networks_from_config() -> list[Network]:
    loader = yaml.SafeLoader(CONFIG_PATH.read_text())
    networks: list[Network] = loader.get_data()  # type: ignore
    return networks


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-l", "--list", action="store_true", help="Lists current networks"
    )
    parser.add_argument(
        "-c",
        "--connect",
        metavar="ssid",
        help="Connects to the given SSID (implies -d)",
    )
    parser.add_argument(
        "-d",
        "--disconnect",
        action="store_true",
        help="Disconnects WiFi and switches to Ethernet",
    )
    return parser.parse_args()


def main() -> None:
    exit_code = 0
    args = parse_args()
    known_wifi_networks = get_wifi_networks_from_config()
    network_manager = NetworkManager(known_wifi_networks)

    if args.disconnect:
        network_manager.disconnect_wifi()
        logging.success("Disconnected")

    if args.connect:
        network_manager.start_systemd_services()
        if network := network_manager.connect_wifi(ssid=args.connect):
            logging.success(f'Connected to {network["ssid"]}')
        else:
            logging.error("Failed to connect")
            exit_code = 1

    if args.list:
        network_manager.start_systemd_services()
        network_manager.list_networks()

    if not args.connect and not args.disconnect and not args.list:
        network_manager.start_systemd_services()
        if network := network_manager.connect_wifi(ssid=None):
            logging.success(f'Connected to {network["ssid"]}')
        else:
            logging.error("Failed to connect")
            exit_code = 1
        network_manager.list_networks()

    sys.exit(exit_code)


if __name__ == "__main__":
    main()
