#!/usr/bin/env python3
# requires: requests
import argparse
import re
import sys
from collections import defaultdict
from dataclasses import dataclass
from datetime import date
from html.parser import HTMLParser

import requests


@dataclass
class Trip:
    start: date
    end: date
    dates_unstable: bool
    title: str
    link: str


def parse_date(text: str) -> date:
    match = re.match("(?:\d+/)?(?P<day>\d+)\.(?P<month>\d+)", text)
    if not match:
        raise ValueError(f"Invalid date: {text}")
    return date(
        year=date.today().year,
        month=int(match.group("month")),
        day=int(match.group("day")),
    )


def parse_dates(text: str) -> tuple[date, date, bool]:
    start, end = text.split(" - ", maxsplit=2)
    dates_unstable = "/" in start or "/" in end
    return (
        parse_date(start),
        parse_date(end),
        dates_unstable,
    )


def parse_barents_trips(html_text: str) -> list[Trip]:
    class Parser(HTMLParser):
        def __init__(self) -> None:
            super().__init__()
            self.stack: dict[str, list[dict[str, str | None]]] = defaultdict(
                list
            )
            self.trips: list[Trip] = []
            self.last_trip_date = ""

        def handle_starttag(
            self, tag: str, attrs: list[tuple[str, str | None]]
        ) -> None:
            self.stack[tag].append(dict(attrs))
            if tag == "ul":
                self.last_trip_date = ""

        def handle_endtag(self, tag: str) -> None:
            self.stack[tag].pop()

        def handle_data(self, data: str) -> None:
            if self.stack["strong"] and data.strip():
                self.last_trip_date = data.strip()

            if not (
                self.stack["a"]
                and self.stack["p"]
                and data.strip()
                and self.last_trip_date
            ):
                return

            try:
                start, end, dates_unstable = parse_dates(self.last_trip_date)
            except Exception as ex:
                print(
                    "Error parsing dates for",
                    self.last_trip_date,
                    file=sys.stderr,
                )
                return

            self.trips.append(
                Trip(
                    start=start,
                    end=end,
                    dates_unstable=dates_unstable,
                    title=data.strip(),
                    link=self.stack["a"][-1]["href"] or "?",
                )
            )

    parser = Parser()
    parser.feed(html_text.replace("\u200b", ""))
    return parser.trips


def print_table(rows: list[list[str]]) -> None:
    if not rows:
        return
    widths = [max(len(row[i]) for row in rows) for i in range(len(rows[0]))]
    for row in rows:
        line = []
        for i, col in enumerate(row):
            line.append(col.ljust(widths[i]))
        line.append(line.pop().strip())
        print(" | ".join(line))


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-l", "--length", help="sort by length", action="store_true"
    )
    return parser.parse_args()


from pathlib import Path


def main() -> None:
    args = parse_args()

    response = requests.get("https://www.barents.pl/kalendarz-wycieczek")
    trips = parse_barents_trips(response.text)

    if args.length:
        trips.sort(key=lambda trip: trip.end - trip.start)

    print_table(
        [
            [
                str(trip.start),
                str(trip.end),
                f"{(trip.end - trip.start).days} dni"
                + ("*" if trip.dates_unstable else " "),
                f"{trip.title} - {trip.link}",
            ]
            for trip in trips
        ]
    )


if __name__ == "__main__":
    main()
