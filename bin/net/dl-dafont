#!/usr/bin/env python3.9
import argparse
import io
import sys
import zipfile
from pathlib import Path

import lxml.html
import requests
import tqdm

BUFFER_SIZE = 32 * 1024


def download_file(session: requests.Session, source_url: str) -> bytes:
    response = session.get(source_url, stream=True)
    total_size = int(response.headers.get("content-length", 0))

    with io.BytesIO() as handle, tqdm.tqdm(
        desc=source_url, total=total_size, unit="B", unit_scale=True
    ) as pbar:
        for chunk in response.iter_content(BUFFER_SIZE):
            handle.write(chunk)
            pbar.update(len(chunk))

        handle.seek(0)
        return handle.read()


def get_font_pkg_urls(session: requests.Session, page_url: str) -> None:
    response = session.get(page_url)
    response.raise_for_status()
    document = lxml.html.fromstring(response.text)
    document.make_links_absolute(base_url=page_url)

    yield from (link for link in document.xpath('//a[@class="dl"]/@href'))

    try:
        next_page_url = document.xpath(
            '//a[@title="Keyboard shortcut: Right arrow"]/@href'
        )[0]
    except LookupError:
        pass
    else:
        yield from get_font_pkg_urls(session, next_page_url)


def download_fonts(
    session: requests.Session, page_url: str, directory: Path
) -> None:
    # font_pkg_urls = Path("/tmp/cache.txt").read_text().splitlines()
    for font_pkg_url in get_font_pkg_urls(session, page_url):
        try:
            with io.BytesIO(download_file(session, font_pkg_url)) as handle:
                zip_file = zipfile.ZipFile(handle)
                for name in zip_file.namelist():
                    if Path(name).suffix.lower() in {".ttf", ".otf"}:
                        target_path = directory / Path(name).name
                        target_path.write_bytes(zip_file.read(name))
        except Exception as ex:
            print(ex, file=sys.stderr)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("url", nargs="+")
    parser.add_argument(
        "-o", "--output", help="output directory", default=Path(), type=Path
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    output_dir = args.output.expanduser()
    session = requests.session()
    session.headers.update({"referer": "dafont.com", "user-agent": "mozilla"})
    for url in args.url:
        download_fonts(session, url, output_dir)


if __name__ == "__main__":
    try:
        main()
        exit(0)
    except RuntimeError as ex:
        print(ex)
        exit(1)
