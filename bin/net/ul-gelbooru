#!/bin/python3
import os
import sys
import argparse
import re
import json
import urllib
import subprocess
from tempfile import TemporaryFile
import requests
from bs4 import BeautifulSoup
from dotfiles.tag_list import TagList


SAFETY_MAP = {
    'safe': 's',
    'sketchy': 'q',
    'questionable': 'q',
    'unsafe': 'e',
    'explicit': 'e',
    's': 's',
    'q': 'q',
    'e': 'e',
    '1': 's',
    '2': 'q',
    '3': 'e',
}


class NoContentError(RuntimeError):
    pass


class NoTagsError(RuntimeError):
    pass


class LoginError(RuntimeError):
    pass


class UploadError(RuntimeError):
    pass


class DuplicateUploadError(RuntimeError):
    def __init__(self, duplicate_url):
        super().__init__('Image already uploaded: %s' % duplicate_url)
        self.url = duplicate_url


def parse_args():
    parser = argparse.ArgumentParser(
        description='Sends post to gelbooru from CLI')
    parser.add_argument(
        '-c', '--config', metavar='CONFIG_PATH',
        help='path to config JSON file', default='~/.config/gelbooru.json')
    parser.add_argument(
        '-s', '--safety', choices=SAFETY_MAP.keys(),
        required=True, help='safety')
    parser.add_argument(
        '--source', default='', help='source')
    parser.add_argument(
        '--title', default='', help='title')
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '-T', '--tag-cmd',
        help='external command to tags')
    group.add_argument(
        '-t', '--tags', help='list of space separated tags')
    parser.set_defaults(tag_cmd='tagger')
    parser.add_argument(
        metavar='POST_PATH', dest='path',
        help='path to the post')
    return parser.parse_args()


def create_session(user, password):
    session = requests.Session()
    response = session.post(
        'http://gelbooru.com/index.php?page=account&s=login&code=00',
        data={
            'user': user,
            'pass': password,
            'submit': 'Log in',
        })
    if response.status_code != 200:
        raise LoginError()
    return session


def upload(session, content, source, title, safety, tags):
    with TemporaryFile() as handle:
        handle.write(content)
        handle.seek(0)
        request = {
            'tags': ' '.join(tags),
            'title': title,
            'source': source,
            'rating': SAFETY_MAP[safety],
            'submit': 'Upload',
        }
        response = session.post(
            'http://gelbooru.com/index.php?page=post&s=add',
            files={'upload': handle},
            data=request)

        soup = BeautifulSoup(response.text, 'html.parser')
        content_div = soup.find('div', {'id': 'content'})
        text = content_div.text.lower()
        if 'image added' in text:
            return
        elif 'already exists' in text:
            raise DuplicateUploadError(
                urllib.parse.urljoin(
                    'http://gelbooru.com', content_div.find('a')['href']))
        else:
            raise UploadError('Unknown response from the server')


def get_file_content(args):
    if not args.path:
        raise NoContentError()
    with open(args.path, 'rb') as handle:
        return handle.read()


def collect_tags(args):
    assert args.tags or args.tag_cmd
    ret = TagList()
    if args.tags:
        ret.add_all(re.split(r'\s+', args.tags))
    elif args.tag_cmd:
        process = subprocess.Popen(
            [args.tag_cmd, '--tags', ' '.join(ret.get())],
            stdout=subprocess.PIPE)
        out, _ = process.communicate()
        ret.add_all(re.split(r'\s+', out.decode()))
    if not len(ret):
        raise NoTagsError()
    return ret


def main():
    args = parse_args()
    with open(os.path.expanduser(args.config), 'r') as handle:
        config = json.load(handle)

    try:
        content = get_file_content(args)
        tags = collect_tags(args)
        print('Tags:')
        print('\n'.join(tags.get()))

        session = create_session(config['user'], config['pass'])
        upload(
            session, content, args.source, args.title, args.safety, tags.get())
        print('Uploaded.')
        sys.exit(0)

    except KeyboardInterrupt:
        print('Cancelled.', file=sys.stderr)
    except LoginError as ex:
        print('Error logging in: %s' % str(ex), file=sys.stderr)
    except DuplicateUploadError as ex:
        print('Error uploading post: %s' % ex.url, file=sys.stderr)
    except UploadError as ex:
        print('Error uploading post: %s' % str(ex), file=sys.stderr)
    except NoTagsError as _:
        print('Error: no tags chosen', file=sys.stderr)
    except NoContentError:
        print('Error: nothing to send', file=sys.stderr)
    sys.exit(1)


if __name__ == '__main__':
    main()
