#!/usr/bin/python3

''' Sends files to yume.pl via its API and outputs copyable links. '''

import re
import os
import sys
import json
import argparse
import subprocess
from tempfile import TemporaryFile
import requests
from dotfiles import config

config_key = config['send-to-yume']

API_URL = config_key.get('api-url', 'https://yume.pl/api/')
BASE_URL = config_key.get('base-url', 'https://yume.pl/#/post/')
USER_NAME = config_key['user']
PASSWORD = config_key['password']

SAFETY_MAP = {
    'safe': 'safe',
    'sketchy': 'sketchy',
    'questionable': 'sketchy',
    'unsafe': 'unsafe',
    'explicit': 'unsafe',
    'q': 'sketchy',
    'e': 'unsafe',
}

def parse_args():
    parser = argparse.ArgumentParser(
        description='Sends post to yume.pl from CLI')
    parser.add_argument(
        '-s', '--safety', choices=SAFETY_MAP.keys(),
        required=False, default='safe', help='safety')
    parser.add_argument(
        '--source', default='', help='source')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        '-T', '--tag-cmd',
        nargs='?', const='tagger', help='external command to tags')
    group.add_argument(
        '-t', '--tags', help='list of space separated tags')
    parser.add_argument(
        metavar='POST_PATH', dest='path',
        help='path to the post')
    return parser.parse_args()

def send(args):
    if not args.path:
        print('Nothing to send.', file=sys.stderr)
        return False

    session = requests.Session()
    response = session.post(
        API_URL + 'login',
        data={'userNameOrEmail': USER_NAME, 'password': PASSWORD})
    auth_token = json.loads(response.text)['token']['name']
    session.headers.update({'x-authorization-token': auth_token})

    with open(args.path, 'rb') as handle, \
            TemporaryFile() as copied_handle:
        copied_handle.write(handle.read())
        copied_handle.seek(0)
        response = session.post(
            API_URL + '/posts',
            files={'content': copied_handle},
            data={
                'contentFileName': os.path.basename(args.path),
                'source': args.source,
                'safety': SAFETY_MAP[args.safety],
                'anonymous': 0,
                'tags': ' '.join(args.tags),
            })
        try:
            decoded = json.loads(response.text)
            if response.status_code == 200:
                print(BASE_URL + str(decoded['post']['id']))
            else:
                print('Error: %s' % decoded['error'], file=sys.stderr)
                return False
        except json.decoder.JSONDecodeError:
            print('Fatal error: %s' % response.text, file=sys.stderr)
            return False
    return True

def main():
    args = parse_args()

    assert args.tags or args.tag_cmd
    if args.tags:
        args.tags = re.split(r'\s+', args.tags)
    elif args.tag_cmd:
        process = subprocess.Popen(args.tag_cmd, stdout=subprocess.PIPE)
        try:
            out, _ = process.communicate()
            args.tags = re.split(r'\s+', out.decode())
        except KeyboardInterrupt as _ex:
            args.tags = []
    args.tags = [tag for tag in args.tags if tag]
    if not args.tags:
        print('No tags chosen', file=sys.stderr)
        sys.exit(1)

    if not send(args):
        sys.exit(1)

if __name__ == '__main__':
    main()
