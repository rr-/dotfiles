#!/usr/bin/env python3.9
# Downloads movie subtitles from Napiprojekt database
import abc
import argparse
import concurrent.futures
import hashlib
import pathlib
import re
import subprocess
import tempfile

import requests

from libdotfiles import logging

PASSWORD = "iBlm8NTigvru0Jr0"
URL_TEMPLATE = (
    "http://napiprojekt.pl/unit_napisy/dl.php"
    + "?l={lang}"
    + "&f={md5}"
    + "&t={checksum}"
    + "&v=other"
    + "&kolejka=false"
    + "&nick="
    + "&pass="
    + "&napios=posix"
)
MOVIE_EXTENSIONS = {".avi", ".mp4", ".mpg", ".mkv"}
SUBTITLE_READERS = []


class SubtitlesNotFoundError(RuntimeError):
    def __init__(self):
        super().__init__("Subtitles not found")


class Task(abc.ABC):
    @property
    @abc.abstractproperty
    def canonical_path(self):
        raise NotImplementedError()

    @abc.abstractmethod
    def get_file_hash(self):
        """Gets the MD5 of the first 10 megabytes of the movie."""
        raise NotImplementedError()


class FileTask(Task):
    def __init__(self, path):
        self.path = path

    @property
    def canonical_path(self):
        return self.path.parent / (self.path.stem + ".srt")

    def get_file_hash(self):
        with self.path.open("rb") as handle:
            md5 = hashlib.md5()
            md5.update(handle.read(1024 * 1024 * 10))
            return md5.hexdigest()

    def __repr__(self):
        return str(self.path)


class HashTask(Task):
    def __init__(self, file_hash):
        self.file_hash = file_hash

    @property
    def canonical_path(self):
        return pathlib.Path(self.file_hash + ".srt")

    def get_file_hash(self):
        return self.file_hash

    def __repr__(self):
        return self.file_hash


class Subtitle:
    def __init__(self, time_start, time_end, text):
        self.time_start = time_start
        self.time_end = time_end
        self.text = text


class SubtitleReader:
    def __init__(self):
        self._regex = None

    def __init_subclass__(cls):
        SUBTITLE_READERS.append(cls())

    def detect(self, lines):
        for line in lines:
            if self._regex.match(line):
                return True
        return False

    def read(self, lines, _fps):
        raise NotImplementedError()


class MdvdSubtitleReader(SubtitleReader):
    def __init__(self):
        super().__init__()
        self._regex = re.compile(r"^\{(\d+)\}\{(\d*)\}\s*(.*)")

    def read(self, lines, fps):
        for line in lines:
            match = self._regex.match(line)
            if match:
                time_start = int(match.group(1)) / float(fps)
                if match.group(2):
                    time_end = int(match.group(2)) / float(fps)
                else:
                    time_end = int(match.group(1)) / float(fps) + 3
                text = match.group(3).strip().split("|")
                yield Subtitle(time_start, time_end, text)


class Sub2SubtitleReader(SubtitleReader):
    def __init__(self):
        super().__init__()
        self._regex = re.compile(
            r"^(\d+):(\d+):(\d+)\.(\d+)\s*\,\s*(\d+):(\d+):(\d+)\.(\d+).*$"
        )

    def read(self, lines, _fps):
        lines_it = iter(lines)
        for line in lines_it:
            match = self._regex.match(line)
            if match:
                time_start = (
                    int(match.group(1)) * 3600
                    + int(match.group(2)) * 60
                    + int(match.group(3))
                    + int(match.group(4)) / 100.0
                )
                time_end = (
                    int(match.group(5)) * 3600
                    + int(match.group(6)) * 60
                    + int(match.group(7))
                    + int(match.group(8)) / 100.0
                )
                text = next(lines_it).strip().split("[br]")
                yield Subtitle(time_start, time_end, text)


class SrtSubtitleReader(SubtitleReader):
    def __init__(self):
        super().__init__()
        self._regex = re.compile(r"^(\d+):(\d+):(\d+),\d+\s*-->.*")

    def read(self, lines, _fps):
        re1 = re.compile(r"^(\d+)\s*$")
        re2 = re.compile(
            r"^(\d+):(\d+):(\d+),(\d+)\s*-->\s*(\d+):(\d+):(\d+),(\d+).*$"
        )
        re3 = re.compile(r"^\s*$")
        lines_it = iter(lines)
        for line in lines_it:
            if not re1.match(line):
                continue
            match = re2.match(next(lines_it))
            if not match:
                continue
            time_start = (
                int(match.group(1)) * 3600
                + int(match.group(2)) * 60
                + int(match.group(3))
                + int(match.group(4)) / 1000.0
            )
            time_end = (
                int(match.group(5)) * 3600
                + int(match.group(6)) * 60
                + int(match.group(7))
                + int(match.group(8)) / 1000.0
            )
            text_lines = []
            text = next(lines_it)
            while not re3.match(text, 0):
                text_lines.append(text.strip())
                text = next(lines_it)
            yield Subtitle(time_start, time_end, text_lines)


class TmpSubtitleReader(SubtitleReader):
    def __init__(self):
        super().__init__()
        self._regex = re.compile(r"^(\d+):(\d+):(\d+):(.*)")

    def read(self, lines, _fps):
        subs = {}
        for line in lines:
            match = self._regex.match(line, 0)
            if match:
                time = (
                    int(match.group(1)) * 3600
                    + int(match.group(2)) * 60
                    + int(match.group(3))
                )
                text = match.group(4).strip().split("|")
                if time in subs:
                    subs[time].extend(text)
                else:
                    subs[time] = text

        for time in sorted(subs.keys()):
            length = 1
            while (time + length) not in subs and length < 4:
                length = length + 1
            yield Subtitle(time, time + length, subs[time])


class Mpl2SubtitleReader(SubtitleReader):
    def __init__(self):
        super().__init__()
        self._regex = re.compile(
            r"\[(?P<start>\d+)\]\[(?P<stop>\d+)\](?P<line>.*)", re.S
        )

    def read(self, lines, _fps):
        for line in lines:
            match = self._regex.match(line)
            if not match:
                continue
            group = match.groupdict()
            start = float(group["start"]) * 0.1
            stop = float(group["stop"]) * 0.1
            text = group["line"].split("|")
            yield Subtitle(start, stop, text)


class SubtitleParser:
    TEMPLATE = "%d\n%.2d:%.2d:%.2d,%.3d --> %.2d:%.2d:%.2d,%.3d\n%s\n\n"

    def parse(self, lines, fps):
        for reader in SUBTITLE_READERS:
            if reader.detect(lines):
                return list(reader.read(lines, fps))
        return []

    def to_srt(self, subtitles):
        out = ""
        for i, subtitle in enumerate(subtitles):
            out += self.TEMPLATE % (
                i + 1,
                int(subtitle.time_start / 3600),
                int(int(subtitle.time_start % 3600) / 60),
                int(subtitle.time_start % 60),
                (subtitle.time_start - int(subtitle.time_start)) * 1000,
                int(subtitle.time_end / 3600),
                int(int(subtitle.time_end % 3600) / 60),
                int(subtitle.time_end % 60),
                (subtitle.time_end - int(subtitle.time_end)) * 1000,
                "\n".join(subtitle.text),
            )

        return out


def parse_args():
    parser = argparse.ArgumentParser(
        description="Get movie subtitles using napiprojekt.pl database"
    )

    parser.add_argument(
        metavar="FILE|HASH",
        dest="sources",
        nargs="+",
        help="file to download subtitles for",
    )

    parser.add_argument(
        "--lang",
        metavar="LANG",
        help="language to download subtitles in",
        default="pl",
        choices=("pl", "en"),
    )

    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        help="overwrite existing subtitles",
    )

    parser.add_argument(
        "-d", "--debug", action="store_true", help="show stacktraces"
    )

    return parser.parse_args()


def flat_walk(root_path):
    """Returns recursive list of files contained inside the directory."""
    for path in root_path.iterdir():
        if path.is_file():
            yield path
        elif path.is_dir():
            yield from flat_walk(path)


def collect_tasks(sources):
    for source in sources:
        match = re.match("(?:napiprojekt:)?(?P<hash>[0-9A-Fa-f]{32})", source)
        if match:
            yield HashTask(match.group("hash"))
            continue

        path = pathlib.Path(source)
        if not path.exists():
            logging.warning(f"Warning: {path} does not exist")
            continue

        if path.is_file():
            yield FileTask(path)
        elif path.is_dir():
            for child_path in source.iterdir():
                if child_path.suffix.lower() in MOVIE_EXTENSIONS:
                    yield FileTask(child_path)


def get_fps(_path):
    return 23.976


def get_checksum(file_hash):
    """Gets the checksum for Napiprojekt basing on the file's MD5."""
    checksum = ""
    add = (0, 13, 16, 11, 5)
    mul = (2, 2, 5, 4, 3)
    idx = (14, 3, 6, 8, 2)
    for i in range(5):
        index = int(file_hash[idx[i]], 16) + add[i]
        value = int(file_hash[index : index + 2], 16) * mul[i]
        checksum += "%x" % (value % 16)
    return checksum


def get_raw_subtitles(file_hash, lang):
    url = URL_TEMPLATE.format(
        lang=lang.upper(), md5=file_hash, checksum=get_checksum(file_hash)
    )

    response = requests.get(url, timeout=3)
    if response.content[0:3] == b"NPc":
        raise SubtitlesNotFoundError()

    with tempfile.NamedTemporaryFile(suffix=".7z", delete=False) as arc_file:
        arc_file.write(response.content)
        arc_path = pathlib.Path(arc_file.name)

    try:
        proc = subprocess.Popen(
            ["7z", "x", "-so", "-p" + PASSWORD, arc_path],
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stdin=subprocess.PIPE,
        )
        return proc.communicate(response.content)[0]
    finally:
        if arc_path.exists():
            arc_path.unlink()


def process_task(task, parser, lang, force, debug):
    """
    Stores subtitles for a single task.
    If the target subtitles already exist, bails out, unless force=True.
    """
    subs_path = task.canonical_path
    if subs_path.exists() and not force:
        logging.warning(f"{task!r}: has subs, ignoring")
        return

    try:
        file_hash = task.get_file_hash()
        output = get_raw_subtitles(file_hash, lang)
        if not output:
            return
        lines = output.decode("cp1250").split("\n")
        subtitles = parser.parse(lines, 23.976)
        output = parser.to_srt(subtitles)

        subs_path.write_bytes(output.encode("utf-8"))
        logging.success(f"{task!r}: saved")
    except Exception as ex:
        if debug:
            raise
        logging.error(f"{task!r}: error ({ex})")


def main():
    args = parse_args()
    logging.setup_colored_logs()
    tasks = collect_tasks(args.sources)
    parser = SubtitleParser()
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        for task in tasks:
            func_args = [task, parser, args.lang, args.force, args.debug]
            if args.debug:
                process_task(*func_args)
            else:
                executor.submit(process_task, *func_args)


if __name__ == "__main__":
    main()
