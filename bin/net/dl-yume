#!/usr/bin/env python
import os
import json
import argparse
import urllib.parse
import requests
from dotfiles import config
from dotfiles import logging

config_key = config['yume-autotagger']
YUME_URL = config_key.get('url', 'https://yume.pl')
API_URL = config_key.get('api-url', 'https://yume.pl/api')
YUME_USER_NAME = config_key['user']
YUME_PASSWORD = config_key['password']


def parse_args():
    parser = argparse.ArgumentParser(description='Downloads posts from yume.pl')
    parser.add_argument('query', help='query to filter the posts with')
    parser.add_argument('dir', help='where to put the files')
    return parser.parse_args()


def collect_urls(session, query):
    logging.info('Collecting posts...')
    page = 1
    while True:
        response = session.get(
            API_URL + '/posts?fields=contentUrl&query=%s&page=%d' %
                (urllib.parse.quote(query), page))
        if response.status_code != 200:
            raise RuntimeError(json.loads(response.text)['description'])
        decoded_response = json.loads(response.text)
        page = int(decoded_response['page']) + 1
        if not len(decoded_response['results']):
            break
        for result in decoded_response['results']:
            yield result['contentUrl']


def save_urls(session, dest_dir, urls):
    os.makedirs(dest_dir, exist_ok=True)
    for url in urls:
        logging.info(url)
        target_path = os.path.join(dest_dir, os.path.basename(url))
        if os.path.exists(target_path):
            continue
        response = session.get(url)
        with open(target_path, 'wb') as handle:
            handle.write(response.content)


def main():
    args = parse_args()

    session = requests.Session()
    session.keep_alive = False
    session.auth = (requests.auth.HTTPBasicAuth(YUME_USER_NAME, YUME_PASSWORD))
    session.headers['Content-Type'] = 'application/json'
    session.headers['Accept'] = 'application/json'

    response = session.get(API_URL + '/user/' + YUME_USER_NAME + '?bump-login')
    if response.status_code != 200:
        raise RuntimeError(json.loads(response.text)['description'])

    urls = collect_urls(session, args.query)
    save_urls(session, args.dir, urls)


if __name__ == '__main__':
    main()
