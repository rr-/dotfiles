#!/usr/bin/env python
import os
import getpass
import json
import urllib.parse
import configargparse
import requests
from dotfiles import logging


def parse_args():
    parser = configargparse.ArgParser(
        'Downloads posts from yume.pl',
        default_config_files=['~/.config/dl-yume.conf'])
    parser.add('--api-url', default='https://yume.pl/api')
    parser.add('-u', '--user')
    parser.add('-p', '--password')
    parser.add('query', help='query to filter the posts with')
    parser.add('dir', help='where to put the files')
    return parser.parse_args()


def create_session(api_url, user_name, password):
    session = requests.Session()
    session.keep_alive = False
    session.auth = requests.auth.HTTPBasicAuth(user_name, password)
    session.headers['Content-Type'] = 'application/json'
    session.headers['Accept'] = 'application/json'
    return session


def bump_login(session, api_url, user_name):
    response = session.get(api_url + '/user/' + user_name + '?bump-login')
    if response.status_code != 200:
        raise RuntimeError(json.loads(response.text)['description'])


def collect_urls(session, api_url, query):
    logging.info('Collecting posts...')
    offset = 0
    while True:
        response = session.get(
            api_url + '/posts?fields=contentUrl&query=%s&offset=%d' %
                (urllib.parse.quote(query), offset))
        if response.status_code != 200:
            raise RuntimeError(json.loads(response.text)['description'])
        decoded_response = json.loads(response.text)
        if not len(decoded_response['results']):
            break
        offset += len(decoded_response['results'])
        for result in decoded_response['results']:
            yield result['contentUrl']


def save_urls(session, dest_dir, urls):
    os.makedirs(dest_dir, exist_ok=True)
    for url in urls:
        logging.info(url)
        target_path = os.path.join(dest_dir, os.path.basename(url))
        if os.path.exists(target_path):
            continue
        response = session.get(url)
        with open(target_path, 'wb') as handle:
            handle.write(response.content)


def main():
    args = parse_args()
    api_url: str = args.api_url.rstrip('/')
    user_name: str = args.user or input('User: ')
    password: str = args.password or getpass.getpass('Password: ')

    session = create_session(api_url, user_name, password)
    bump_login(session, api_url, user_name)
    urls = collect_urls(session, api_url, args.query)
    save_urls(session, args.dir, urls)


if __name__ == '__main__':
    main()
