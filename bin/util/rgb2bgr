#!/usr/bin/env python3
import argparse
import re
from dataclasses import dataclass

RGB_REGEX = re.compile(
    r"^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$", flags=re.I
)


@dataclass
class Color:
    r: int
    g: int
    b: int


def rgb(text: str) -> Color:
    match = RGB_REGEX.match(text)
    if not match:
        raise ValueError(f'"{text}" is not a valid color')
    return Color(
        r=int(match.group(1), 16),
        g=int(match.group(2), 16),
        b=int(match.group(3), 16),
    )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("color", help="Source color", type=rgb, nargs="+")
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    for color in args.color:
        new_color = Color(r=color.b, g=color.g, b=color.r)
        print(f"{new_color.r:02X}{new_color.g:02X}{new_color.b:02X}")


if __name__ == "__main__":
    main()
