#!/usr/bin/env python3
# requires: holidays
import argparse
import calendar
import re
from datetime import date, timedelta
from itertools import groupby
from typing import Any

from holidays import country_holidays

COLOR_RESET = "\x1B[0m"
COLOR_TODAY = "\x1B[38;5;%dm\x1B[48;5;%dm" % (232, 39)
COLOR_WEEKEND = "\x1B[38;5;%dm\x1B[48;5;%dm" % (194, 64)

MONTHS = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
]
WEEK_DAYS = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
PL_HOLIDAYS = country_holidays("PL")


def strip_ansi(text: str) -> str:
    return re.sub("\x1B.*?m", "", text)


def get_weekdays_count(year: int, month: int) -> int:
    cal = calendar.Calendar()
    return sum(
        0
        if day.weekday() in {5, 6}
        or day in PL_HOLIDAYS
        or day.year != year
        or day.month != month
        else 1
        for day in cal.itermonthdates(year, month)
    )


def format_month(
    year: int, month: int, include_year: bool, count_weekdays: bool
) -> str:
    days_line = " ".join(WEEK_DAYS)

    month_line = MONTHS[month - 1]
    if include_year:
        month_line += f" {year}"
    if count_weekdays:
        month_line += f" ({get_weekdays_count(year, month)})"
    month_line = month_line.center(len(days_line))

    lines: list[str] = [month_line, days_line]

    cal = calendar.Calendar()
    for _, group in groupby(
        enumerate(cal.itermonthdates(year, month)), key=lambda kv: kv[0] // 7
    ):
        line = []
        for _idx, day in group:
            if day.year != year or day.month != month:
                line.append("  ")
            elif day == date.today():
                line.append(COLOR_TODAY + f"{day.day:2d}" + COLOR_RESET)
            elif day.weekday() in {5, 6} or day in PL_HOLIDAYS:
                line.append(COLOR_WEEKEND + f"{day.day:2d}" + COLOR_RESET)
            else:
                line.append(f"{day.day:2d}")
        lines.append(" ".join(line))

    return "\n".join(lines)


def year_and_month(source: str) -> tuple[int, int | None]:
    match = re.match(r"^(?P<year>\d{4})(-(?P<month>\d{2}))?$", source)
    if not match:
        raise ValueError("expected year or year-month")
    return (
        int(match.group("year")),
        int(match.group("month")) if match.group("month") else None,
    )


# for better argparse error messages
year_and_month.__name__ = "date"


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-y",
        "--year",
        help="display calendar for the entire year",
        action="store_true",
        dest="display_year",
    )
    parser.add_argument(
        "-3",
        dest="display_three",
        help="display calendar for the previous and next month as well",
        action="store_true",
    )
    parser.add_argument(
        "-w",
        dest="count_weekdays",
        help="show week day count",
        action="store_true",
    )
    parser.add_argument(
        "date",
        type=year_and_month,
        help="year and optional month to display",
        nargs="?",
    )
    args = parser.parse_args()
    if args.date:
        args.year, args.month = args.date
    else:
        today = date.today()
        args.year = today.year
        args.month = today.month
    if args.year and not args.month:
        args.display_year = True

    return args


def merge_linewise(sources: list[str]) -> str:
    result = []
    source_lines: list[list[str]] = [item.splitlines() for item in sources]
    max_sources_lines = max(map(len, source_lines))
    for source in source_lines:
        max_source_columns = max(len(strip_ansi(item)) for item in source)
        while len(source) < max_sources_lines:
            source.append(" " * max_source_columns)
    for lines in zip(*source_lines):
        result.append("   ".join(lines))
    return "\n".join(result)


def display_year(year: int, **kwargs: Any) -> None:
    groups = []
    for _, month_range in groupby(range(12), key=lambda num: num // 3):
        groups.append(
            merge_linewise(
                [
                    format_month(year, month + 1, include_year=False, **kwargs)
                    for month in month_range
                ]
            )
        )
    lines = "\n\n".join(groups).splitlines()
    max_columns = max(len(strip_ansi(item)) for item in lines)
    print(f"{year}".center(max_columns))
    print("\n".join(lines))


def display_three_months(year: int, month: int, **kwargs: Any) -> None:
    left = date(year, month, 1) - timedelta(days=15)
    right = date(year, month, 1) + timedelta(days=35)

    print(
        merge_linewise(
            [
                format_month(
                    left.year, left.month, include_year=True, **kwargs
                ),
                format_month(year, month, include_year=True, **kwargs),
                format_month(
                    right.year, right.month, include_year=True, **kwargs
                ),
            ]
        )
    )


def display_single_month(year: int, month: int, **kwargs: Any) -> None:
    print(format_month(year, month, include_year=True, **kwargs))


def main() -> None:
    args = parse_args()

    kwargs = dict(
        count_weekdays=args.count_weekdays,
    )
    if args.display_year:
        display_year(args.year, **kwargs)
    elif args.display_three:
        display_three_months(args.year, args.month, **kwargs)
    else:
        display_single_month(args.year, args.month, **kwargs)


if __name__ == "__main__":
    main()
