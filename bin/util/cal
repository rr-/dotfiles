#!/usr/bin/env python3
import argparse
import calendar
import re
from datetime import date, timedelta
from itertools import groupby

from holidays import Polish

COLOR_RESET = "\x1B[0m"
COLOR_TODAY = "\x1B[38;5;%dm\x1B[48;5;%dm" % (232, 39)
COLOR_WEEKEND = "\x1B[38;5;%dm\x1B[48;5;%dm" % (194, 64)

MONTHS = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
]
WEEK_DAYS = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
PL_HOLIDAYS = Polish()


def strip_ansi(text: str) -> str:
    return re.sub("\x1B.*?m", "", text)


def get_weekdays_count(year: int, month: int) -> int:
    cal = calendar.Calendar()
    return sum(
        0
        if day.weekday() in {5, 6}
        or day in PL_HOLIDAYS
        or day.year != year
        or day.month != month
        else 1
        for day in cal.itermonthdates(year, month)
    )


def format_month(
    year: int, month: int, include_year: bool, count_weekdays: bool
) -> str:
    days_line = " ".join(WEEK_DAYS)

    month_line = MONTHS[month - 1]
    if include_year:
        month_line += f" {year}"
    if count_weekdays:
        month_line += f" ({get_weekdays_count(year, month)})"
    month_line = month_line.center(len(days_line))

    lines: list[str] = [month_line, days_line]

    cal = calendar.Calendar()
    for _, group in groupby(
        enumerate(cal.itermonthdates(year, month)), key=lambda kv: kv[0] // 7
    ):
        line = []
        for _idx, day in group:
            if day.year == year and day.month == month:
                if day == date.today():
                    line.append(COLOR_TODAY + f"{day.day:2d}" + COLOR_RESET)
                elif day.weekday() in {5, 6} or day in PL_HOLIDAYS:
                    line.append(COLOR_WEEKEND + f"{day.day:2d}" + COLOR_RESET)
                else:
                    line.append(f"{day.day:2d}")
            else:
                line.append("  ")
        lines.append(" ".join(line))

    return "\n".join(lines)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-y",
        "--year",
        help="display calendar for the entire year",
        action="store_true",
    )
    parser.add_argument(
        "-3",
        dest="three",
        help="display calendar for the previous and next month as well",
        action="store_true",
    )
    parser.add_argument(
        "-w",
        dest="count_weekdays",
        help="show week day count",
        action="store_true",
    )
    return parser.parse_args()


def merge_linewise(sources: list[str]) -> str:
    result = []
    source_lines: list[list[str]] = [item.splitlines() for item in sources]
    max_sources_lines = max(map(len, source_lines))
    for source in source_lines:
        max_source_columns = max(len(strip_ansi(item)) for item in source)
        while len(source) < max_sources_lines:
            source.append(" " * max_source_columns)
    for lines in zip(*source_lines):
        result.append("   ".join(lines))
    return "\n".join(result)


def main() -> None:
    args = parse_args()
    today = date.today()

    if args.year:
        groups = []
        for _, month_range in groupby(range(12), key=lambda num: num // 3):
            groups.append(
                merge_linewise(
                    [
                        format_month(
                            today.year,
                            month + 1,
                            include_year=False,
                            count_weekdays=args.count_weekdays,
                        )
                        for month in month_range
                    ]
                )
            )
        lines = "\n\n".join(groups).splitlines()
        max_columns = max(len(strip_ansi(item)) for item in lines)
        print(f"{today.year}".center(max_columns))
        print("\n".join(lines))
    elif args.three:
        left = date(today.year, today.month, 1) - timedelta(days=15)
        right = date(today.year, today.month, 1) + timedelta(days=35)

        print(
            merge_linewise(
                [
                    format_month(
                        left.year,
                        left.month,
                        include_year=True,
                        count_weekdays=args.count_weekdays,
                    ),
                    format_month(
                        today.year,
                        today.month,
                        include_year=True,
                        count_weekdays=args.count_weekdays,
                    ),
                    format_month(
                        right.year,
                        right.month,
                        include_year=True,
                        count_weekdays=args.count_weekdays,
                    ),
                ]
            )
        )
    else:
        print(
            format_month(
                today.year,
                today.month,
                include_year=True,
                count_weekdays=args.count_weekdays,
            )
        )


if __name__ == "__main__":
    main()
