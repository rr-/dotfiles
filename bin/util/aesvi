#!/usr/bin/env python3
import argparse
import hashlib
import os
import shlex
import subprocess
import sys
import tempfile
from getpass import getpass
from pathlib import Path

from Crypto import Random
from Crypto.Cipher import AES


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser("aesvi - poor man's encryption")
    parser.add_argument("path", type=Path, help="file to modify")
    parser.add_argument(
        "--editor",
        type=str,
        default=os.environ.get("EDITOR") or "nano",
        help="use this particular editor",
    )
    return parser.parse_args()


class InvalidKey(Exception):
    pass


class AESCipher:
    def __init__(self, key: str) -> None:
        self.key = hashlib.sha256(key.encode()).digest()
        self.check = bytes(range(AES.block_size))

    def encrypt(self, dec: bytes) -> bytes:
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return iv + cipher.encrypt(self._pad(dec) + self.check)

    def decrypt(self, enc: bytes) -> bytes:
        cipher = AES.new(self.key, AES.MODE_CBC, enc[: AES.block_size])
        tmp = cipher.decrypt(enc[AES.block_size :])
        if tmp[-AES.block_size :] != self.check:
            raise InvalidKey
        return self._unpad(tmp[: -AES.block_size])

    def _pad(self, source: bytes) -> bytes:
        bs = AES.block_size * 2
        return source + (bs - len(source) % bs) * bytes(
            [bs - len(source) % bs]
        )

    def _unpad(self, source: bytes) -> bytes:
        return source[: -ord(source[len(source) - 1 :])]


def main() -> None:
    args = parse_args()
    key = getpass()

    aes = AESCipher(key)
    tmp_file = tempfile.NamedTemporaryFile()
    tmp_path = Path(tmp_file.name)

    if args.path.exists():
        try:
            tmp_path.write_bytes(aes.decrypt(args.path.read_bytes()))
        except InvalidKey:
            print(
                f"!! The supplied key seems to be invalid. Aborting.",
                file=sys.stderr,
            )
            sys.exit(1)

    retval = subprocess.call(shlex.split(args.editor) + [str(tmp_path)])
    if retval != 0:
        print(
            f"!! Editor {args.editor} exited nonzero with {retval}. Aborting.",
            file=sys.stderr,
        )
        sys.exit(1)

    args.path.write_bytes(aes.encrypt(tmp_path.read_bytes()))


if __name__ == "__main__":
    main()
