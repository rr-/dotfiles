#!/bin/python3
# Switches between dark and light theme in various programs
# (requires AcceptEnv in sshd_config to work on SSH)

import argparse
import shutil
from dotfiles import logging
from os import unlink, symlink
from os.path import expanduser, islink, exists
from subprocess import run, PIPE

logger = logging.getLogger(__name__)


def _has_executable(program):
    return shutil.which(program) is not None


def _relink(target, source):
    source = expanduser(source)
    target = expanduser(target)
    if not exists(target):
        logger.warning('Target doesn\'t exist: %s, symlink skipped' % target)
        return
    if islink(target):
        unlink(target)
    symlink(source, target)


def _parse_args():
    parser = argparse.ArgumentParser(
        description='Switches between dark and light theme in various programs')
    parser.add_argument('theme', choices=('light', 'dark'))
    return parser.parse_args()


def _update_mintty(theme):
    if not _has_executable('mintty'):
        logger.warning('MinTTY not found, skipped updating symlinks')
        return
    logger.info('Updating symlinks for MinTTY')
    _relink('~/.minttyrc', '~/.minttyrc-%s' % theme)


def _update_wallpaper(theme):
    if not _has_executable('feh'):
        logger.warning('feh not found, skipped updating wallpapers')
        return
    logger.info('Updating wallpapers using feh')
    monitor_count = (run(['xrandr', '-q'], stdout=PIPE)
        .stdout
        .decode()
        .count(' connected'))
    args = ['feh']
    for i in range(monitor_count):
        args.append('--bg-fill')
        args.append(expanduser('~/.wallpaper-%s-%i' % (theme, i + 1)))
    run(args)


def _update_bspwm(theme):
    if not _has_executable('bspc'):
        logger.warning('bspc not found, skipped updating window borders')
        return
    logger.info('Updating window borders using bspc')
    if theme == 'light':
        run(['bspc', 'config', 'normal_border_color', '#bbbbbb'])
        run(['bspc', 'config', 'active_border_color', '#bbbbbb'])
        run(['bspc', 'config', 'focused_border_color', '#00d0ee'])
    else:
        run(['bspc', 'config', 'normal_border_color', '#555555'])
        run(['bspc', 'config', 'active_border_color', '#555555'])
        run(['bspc', 'config', 'focused_border_color', '#00a0a0'])


def _update_zsh(theme):
    logger.info('Updating environment variable exporter for zsh')
    with open(expanduser('~/.config/zsh/lightness.sh'), 'w') as handle:
        handle.write('export LIGHTNESS=%s\n' % theme)
        handle.write(
            'export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --color=$LIGHTNESS\n')


def _update_vifm(theme):
    if islink(expanduser('~/.config/vifm/colors/current')):
        unlink(expanduser('~/.config/vifm/colors/current'))
    symlink(
        expanduser('~/.config/vifm/colors/%s.vifm' % theme),
        expanduser('~/.config/vifm/colors/current'))


def _update_xresources(theme):
    if not _has_executable('xrdb'):
        logger.warning('XRDB not found, skipped updating xresources')
        return
    logger.info('Updating sylminks for xresources')
    _relink('~/.config/Xresources-theme', '~/.config/Xresources-%s' % theme)
    run(['xrdb', '-override', expanduser('~/.config/Xresources-theme')])


def main():
    args = _parse_args()
    _update_mintty(args.theme)
    _update_wallpaper(args.theme)
    _update_bspwm(args.theme)
    _update_zsh(args.theme)
    _update_vifm(args.theme)
    _update_xresources(args.theme)


if __name__ == '__main__':
    main()
