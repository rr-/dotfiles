#!/usr/bin/env python3
import argparse
import random
import re
import string
from dataclasses import dataclass
from datetime import datetime
from enum import IntEnum
from pathlib import Path
from subprocess import check_call, check_output


class CaptureMode(IntEnum):
    desktop = 1
    active_window = 2
    active_screen = 3


@dataclass
class Geometry:
    x: int
    y: int
    w: int
    h: int

    def __str__(self) -> str:
        return f"{self.w}x{self.h}+{self.x}+{self.y}"


def get_default_filename(suffix: str) -> str:
    return (
        datetime.now().strftime("%Y%m%d_%H%M%S")
        + "_"
        + "".join(random.choices(string.ascii_lowercase, k=3))
        + f".{suffix}"
    )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--output-dir", type=Path, default=Path.home(), nargs="?"
    )
    parser.add_argument("--output-filename", type=str, nargs="?")
    parser.add_argument(
        "-F",
        "--output-format",
        type=str,
        default="png",
        choices=["png", "jpg"],
        nargs="?",
    )
    parser.add_argument("-i", "--interactive", action="store_true")
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-d",
        "--desktop",
        action="store_const",
        dest="capture_mode",
        const=CaptureMode.desktop,
    )
    group.add_argument(
        "-w",
        "--window",
        action="store_const",
        dest="capture_mode",
        const=CaptureMode.active_window,
    )
    group.add_argument(
        "-s",
        "--screen",
        action="store_const",
        dest="capture_mode",
        const=CaptureMode.active_screen,
    )
    return parser.parse_args()


def get_active_screen_geometry() -> Geometry | None:
    mouse_location = check_output(
        ["xdotool", "getmouselocation"], text=True
    ).strip()
    match = re.search(r"x:(\d+) y:(\d+)", mouse_location)
    assert match is not None
    x, y = map(int, match.groups())

    xrandr_output = check_output(["xrandr"], text=True).strip()
    for line in xrandr_output.splitlines():
        if "connected" in line:
            match = re.search(r"(\d+)x(\d+)\+(\d+)\+(\d+)", line)
            if match:
                width, height, x_offset, y_offset = map(int, match.groups())
                if (
                    x_offset <= x < x_offset + width
                    and y_offset <= y < y_offset + height
                ):
                    return Geometry(x=x_offset, y=y_offset, w=width, h=height)

    return None


def capture_screenshot(maim_args: list[str]) -> None:
    cmd = ["maim", *maim_args]
    check_call(cmd)


def main() -> None:
    args = parse_args()
    output_path = str(
        args.output_dir
        / (args.output_filename or get_default_filename(args.output_format))
    )
    maim_args: list[str] = []

    match args.capture_mode:
        case CaptureMode.active_window:
            maim_args += [
                "-i",
                check_output(
                    ["xdotool", "getactivewindow"], text=True
                ).strip(),
            ]
        case CaptureMode.active_screen:
            geometry = get_active_screen_geometry()
            assert geometry is not None
            maim_args = ["--geometry", str(geometry)]
        case CaptureMode.desktop:
            # default operation of maim
            pass

    if args.interactive:
        maim_args.append("--select")
    maim_args.append(output_path)

    capture_screenshot(maim_args)
    print(output_path, end="")


if __name__ == "__main__":
    main()
