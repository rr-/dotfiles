#!/bin/python3
# Distributes files in equal chunks to subdirectories

import os
import sys
import argparse
import shutil
import collections
from enum import Enum

class DistributionStyle:
    FILL_FIRST = 0
    FILL_LAST = 1
    FILL_FIRST_AVAILABLE = 3
    ALWAYS_CREATE = 2


def parse_args():
    help = (
        'Distribute files in given directory to subdirectories.\n\n' +
        'Subdirectories have numeric names starting at 1. Names are *not* ' +
        'padded with 0 to avoid the need to rename existing subdirectories ' +
        'whenever the digit count changes. Only files are distributed - all ' +
        'directories are ignored.')

    parser = argparse.ArgumentParser(description=help.strip())

    parser.add_argument(
        '-m', '--max', metavar='MAX', type=int, default=1000,
        help=(
            'set upper limit how many files a subdirectory should contain' +
            ' (default: 1000)'))

    parser.add_argument(
        'base_dir', metavar='DIR', help='directory to organize')

    group = parser.add_mutually_exclusive_group()
    group.set_defaults(style=DistributionStyle.FILL_LAST, verbosity=0)
    group.add_argument(
        '--fill-last', action='store_const', dest='style',
        const=DistributionStyle.FILL_LAST,
        help='try to fill last subdirectory available (default)')
    group.add_argument(
        '--fill-first', action='store_const', dest='style',
        const=DistributionStyle.FILL_FIRST,
        help=(
            'try to fill first subdirectory available ' +
            '(will recreate missing subdirectories starting at 1)'))
    group.add_argument(
        '--fill-first-available', action='store_const', dest='style',
        const=DistributionStyle.FILL_FIRST_AVAILABLE,
        help=(
            'try to fill first existing subdirectory ' +
            '(won\'t recreate missing subdirectories starting at 1)'))
    group.add_argument(
        '--always-create',
        action='store_const', dest='style',
        const=DistributionStyle.ALWAYS_CREATE,
        help=(
            'don\'t fill existing subdirectories ' +
            '(will create new subdirectory after the last one available)'))

    parser.add_argument(
        '--dry-run', action='store_true',
        help='don\'t do anything (simulation)')

    parser.set_defaults(verbosity=0)
    parser.add_argument(
        '-v', '--verbose', action='store_const', dest='verbosity', const=1,
        help='print basic movement statistics')
    parser.add_argument(
        '--very-verbose', action='store_const', dest='verbosity', const=2,
        help='print every single movement operation')
    parser.add_argument(
        '--silent', action='store_const', dest='verbosity', const=0,
        help='print only errors')

    return parser.parse_args()


def next_dir_number(dir_map, style, max_file_count):
    max_dir_number = max(list(dir_map.keys()) + [0])
    next_dir_number = max_dir_number + 1

    if style == DistributionStyle.FILL_FIRST:
        for i in range(1, max_dir_number + 1):
            if i not in dir_map:
                return i, max_file_count
            elif dir_map[i] < max_file_count:
                return dir, max_file_count - dir_map[i]
        return next_dir_number, max_file_count

    elif style == DistributionStyle.FILL_FIRST_AVAILABLE:
        for dir, file_count in dir_map.items():
            if file_count < max_file_count:
                return dir, max_file_count - file_count
        return next_dir_number, max_file_count

    elif style == DistributionStyle.FILL_LAST:
        for dir, file_count in reversed(dir_map.items()):
            if file_count < max_file_count:
                return dir, max_file_count - file_count
            break
        return next_dir_number, max_file_count

    elif style == DistributionStyle.ALWAYS_CREATE:
        return next_dir_number, max_file_count

    raise AssertionError()


def main():
    args = parse_args()

    if not os.path.exists(args.base_dir):
        print('Directory does not exist: %s' % args.base_dir, file=sys.stderr)
        sys.exit(1)

    _, dirs, files = next(os.walk(args.base_dir))
    files = sorted(files)

    numeric_dirs = [dir for dir in dirs if dir.isdigit()]
    numeric_dirs = sorted(numeric_dirs)
    dir_gen = (
        (int(dir), len(os.listdir(os.path.join(args.base_dir, dir))))
        for dir in numeric_dirs)
    dir_gen = sorted(dir_gen, key=lambda dir: int(dir[0]))
    dir_map = collections.OrderedDict(dir_gen)

    while files:
        dir_number, avail_files = \
            next_dir_number(dir_map, args.style, args.max)
        dir = '%d' % dir_number
        files_to_move = files[0:avail_files]

        target_path = os.path.join(args.base_dir, dir)
        if args.verbosity > 0:
            print('Using directory %s to distribute %d files' % (
                target_path, len(files_to_move)))
        if not args.dry_run:
            os.makedirs(target_path, exist_ok=True)

        for file in files_to_move:
            source_path = os.path.join(args.base_dir, file)
            target_path = os.path.join(args.base_dir, dir, file)
            if args.verbosity > 1:
                print('Moving', source_path, 'to', target_path)
            if not args.dry_run:
                shutil.move(source_path, target_path)

        files = files[avail_files:]
        dir_map[dir_number] = args.max


if __name__ == '__main__':
    main()
