#!/usr/bin/env python3
import argparse
import json
from collections.abc import Iterable
from pathlib import Path
from subprocess import call, check_output, run
from typing import TypedDict

HOME_DIR = Path("~").expanduser()
MOUNT_PATHS: dict[str, Path] = {
    "NIKON Z 8": HOME_DIR / "mnt",
}


class DiskInfo(TypedDict):
    label: str | None
    mountpoint: str | None
    name: str


def get_disk_devices() -> Iterable[DiskInfo]:
    info = json.loads(
        check_output(["lsblk", "-J", "-o", "NAME,MOUNTPOINT,LABEL"], text=True)
    )
    stack = info["blockdevices"]
    while stack:
        device = stack.pop(0)
        stack.extend(device.get("children", []))
        yield device


def unmount(path: Path) -> None:
    print("Umounting", path)
    run(["sudo", "umount", "--lazy", str(path)])
    path.rmdir()


def mount(device_name: str, path: Path) -> None:
    print(f"Mounting {device_name} to {path}")
    path.mkdir(parents=True, exist_ok=True)
    run(["sudo", "mount", f"/dev/{device_name}", str(path)])


def is_mounted(path: Path) -> bool:
    return run(["findmnt", path], capture_output=True).returncode == 0


def unmount_known() -> None:
    for path in MOUNT_PATHS.values():
        if is_mounted(path):
            unmount(path)


def mount_known() -> None:
    disk_devices = list(get_disk_devices())
    for device in disk_devices:
        label = device["label"]
        if label:
            target_mounth_path = MOUNT_PATHS.get(label)
            if target_mounth_path:
                if is_mounted(target_mounth_path):
                    unmount(target_mounth_path)
                mount(device["name"], MOUNT_PATHS[label])


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--unmount", action="store_true")
    return parser.parse_args()


def main() -> None:
    args = parse_args()

    if args.unmount:
        unmount_known()
    else:
        mount_known()


if __name__ == "__main__":
    main()
