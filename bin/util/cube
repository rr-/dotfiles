#!/usr/bin/python3
# Prints color cube for XTerm

import re

SYSTEM_TEMPLATE = "\x1B[{fgbg};5;{color}m-{color:02X}-\x1B[0m"
CUBE_TEMPLATE = "\x1B[{fgbg};5;{color}m{color:02X}\x1B[0m"
RAMP_TEMPLATE = CUBE_TEMPLATE

PALETTE_SYSTEM = {
    0x0: [0x00, 0x00, 0x00],
    0x1: [0x80, 0x00, 0x00],
    0x2: [0x00, 0x80, 0x00],
    0x3: [0x80, 0x80, 0x00],
    0x4: [0x00, 0x00, 0x80],
    0x5: [0x80, 0x00, 0x80],
    0x6: [0x00, 0x80, 0x80],
    0x7: [0xC0, 0xC0, 0xC0],
    0x8: [0x80, 0x80, 0x80],
    0x9: [0xFF, 0x00, 0x00],
    0xA: [0x00, 0xFF, 0x00],
    0xB: [0xFF, 0xFF, 0x00],
    0xC: [0x00, 0x00, 0xFF],
    0xD: [0xFF, 0x00, 0xFF],
    0xE: [0x00, 0xFF, 0xFF],
    0xF: [0xFF, 0xFF, 0xFF],
}

PALETTE_256 = {
    0x10: [0x00, 0x00, 0x00],
    0x11: [0x00, 0x00, 0x5F],
    0x12: [0x00, 0x00, 0x87],
    0x13: [0x00, 0x00, 0xAF],
    0x14: [0x00, 0x00, 0xD7],
    0x15: [0x00, 0x00, 0xFF],
    0x16: [0x00, 0x5F, 0x00],
    0x17: [0x00, 0x5F, 0x5F],
    0x18: [0x00, 0x5F, 0x87],
    0x19: [0x00, 0x5F, 0xAF],
    0x1A: [0x00, 0x5F, 0xD7],
    0x1B: [0x00, 0x5F, 0xFF],
    0x1C: [0x00, 0x87, 0x00],
    0x1D: [0x00, 0x87, 0x5F],
    0x1E: [0x00, 0x87, 0x87],
    0x1F: [0x00, 0x87, 0xAF],
    0x20: [0x00, 0x87, 0xD7],
    0x21: [0x00, 0x87, 0xFF],
    0x22: [0x00, 0xAF, 0x00],
    0x23: [0x00, 0xAF, 0x5F],
    0x24: [0x00, 0xAF, 0x87],
    0x25: [0x00, 0xAF, 0xAF],
    0x26: [0x00, 0xAF, 0xD7],
    0x27: [0x00, 0xAF, 0xFF],
    0x28: [0x00, 0xD7, 0x00],
    0x29: [0x00, 0xD7, 0x5F],
    0x2A: [0x00, 0xD7, 0x87],
    0x2B: [0x00, 0xD7, 0xAF],
    0x2C: [0x00, 0xD7, 0xD7],
    0x2D: [0x00, 0xD7, 0xFF],
    0x2E: [0x00, 0xFF, 0x00],
    0x2F: [0x00, 0xFF, 0x5F],
    0x30: [0x00, 0xFF, 0x87],
    0x31: [0x00, 0xFF, 0xAF],
    0x32: [0x00, 0xFF, 0xD7],
    0x33: [0x00, 0xFF, 0xFF],
    0x34: [0x5F, 0x00, 0x00],
    0x35: [0x5F, 0x00, 0x5F],
    0x36: [0x5F, 0x00, 0x87],
    0x37: [0x5F, 0x00, 0xAF],
    0x38: [0x5F, 0x00, 0xD7],
    0x39: [0x5F, 0x00, 0xFF],
    0x3A: [0x5F, 0x5F, 0x00],
    0x3B: [0x5F, 0x5F, 0x5F],
    0x3C: [0x5F, 0x5F, 0x87],
    0x3D: [0x5F, 0x5F, 0xAF],
    0x3E: [0x5F, 0x5F, 0xD7],
    0x3F: [0x5F, 0x5F, 0xFF],
    0x40: [0x5F, 0x87, 0x00],
    0x41: [0x5F, 0x87, 0x5F],
    0x42: [0x5F, 0x87, 0x87],
    0x43: [0x5F, 0x87, 0xAF],
    0x44: [0x5F, 0x87, 0xD7],
    0x45: [0x5F, 0x87, 0xFF],
    0x46: [0x5F, 0xAF, 0x00],
    0x47: [0x5F, 0xAF, 0x5F],
    0x48: [0x5F, 0xAF, 0x87],
    0x49: [0x5F, 0xAF, 0xAF],
    0x4A: [0x5F, 0xAF, 0xD7],
    0x4B: [0x5F, 0xAF, 0xFF],
    0x4C: [0x5F, 0xD7, 0x00],
    0x4D: [0x5F, 0xD7, 0x5F],
    0x4E: [0x5F, 0xD7, 0x87],
    0x4F: [0x5F, 0xD7, 0xAF],
    0x50: [0x5F, 0xD7, 0xD7],
    0x51: [0x5F, 0xD7, 0xFF],
    0x52: [0x5F, 0xFF, 0x00],
    0x53: [0x5F, 0xFF, 0x5F],
    0x54: [0x5F, 0xFF, 0x87],
    0x55: [0x5F, 0xFF, 0xAF],
    0x56: [0x5F, 0xFF, 0xD7],
    0x57: [0x5F, 0xFF, 0xFF],
    0x58: [0x87, 0x00, 0x00],
    0x59: [0x87, 0x00, 0x5F],
    0x5A: [0x87, 0x00, 0x87],
    0x5B: [0x87, 0x00, 0xAF],
    0x5C: [0x87, 0x00, 0xD7],
    0x5D: [0x87, 0x00, 0xFF],
    0x5E: [0x87, 0x5F, 0x00],
    0x5F: [0x87, 0x5F, 0x5F],
    0x60: [0x87, 0x5F, 0x87],
    0x61: [0x87, 0x5F, 0xAF],
    0x62: [0x87, 0x5F, 0xD7],
    0x63: [0x87, 0x5F, 0xFF],
    0x64: [0x87, 0x87, 0x00],
    0x65: [0x87, 0x87, 0x5F],
    0x66: [0x87, 0x87, 0x87],
    0x67: [0x87, 0x87, 0xAF],
    0x68: [0x87, 0x87, 0xD7],
    0x69: [0x87, 0x87, 0xFF],
    0x6A: [0x87, 0xAF, 0x00],
    0x6B: [0x87, 0xAF, 0x5F],
    0x6C: [0x87, 0xAF, 0x87],
    0x6D: [0x87, 0xAF, 0xAF],
    0x6E: [0x87, 0xAF, 0xD7],
    0x6F: [0x87, 0xAF, 0xFF],
    0x70: [0x87, 0xD7, 0x00],
    0x71: [0x87, 0xD7, 0x5F],
    0x72: [0x87, 0xD7, 0x87],
    0x73: [0x87, 0xD7, 0xAF],
    0x74: [0x87, 0xD7, 0xD7],
    0x75: [0x87, 0xD7, 0xFF],
    0x76: [0x87, 0xFF, 0x00],
    0x77: [0x87, 0xFF, 0x5F],
    0x78: [0x87, 0xFF, 0x87],
    0x79: [0x87, 0xFF, 0xAF],
    0x7A: [0x87, 0xFF, 0xD7],
    0x7B: [0x87, 0xFF, 0xFF],
    0x7C: [0xAF, 0x00, 0x00],
    0x7D: [0xAF, 0x00, 0x5F],
    0x7E: [0xAF, 0x00, 0x87],
    0x7F: [0xAF, 0x00, 0xAF],
    0x80: [0xAF, 0x00, 0xD7],
    0x81: [0xAF, 0x00, 0xFF],
    0x82: [0xAF, 0x5F, 0x00],
    0x83: [0xAF, 0x5F, 0x5F],
    0x84: [0xAF, 0x5F, 0x87],
    0x85: [0xAF, 0x5F, 0xAF],
    0x86: [0xAF, 0x5F, 0xD7],
    0x87: [0xAF, 0x5F, 0xFF],
    0x88: [0xAF, 0x87, 0x00],
    0x89: [0xAF, 0x87, 0x5F],
    0x8A: [0xAF, 0x87, 0x87],
    0x8B: [0xAF, 0x87, 0xAF],
    0x8C: [0xAF, 0x87, 0xD7],
    0x8D: [0xAF, 0x87, 0xFF],
    0x8E: [0xAF, 0xAF, 0x00],
    0x8F: [0xAF, 0xAF, 0x5F],
    0x90: [0xAF, 0xAF, 0x87],
    0x91: [0xAF, 0xAF, 0xAF],
    0x92: [0xAF, 0xAF, 0xD7],
    0x93: [0xAF, 0xAF, 0xFF],
    0x94: [0xAF, 0xD7, 0x00],
    0x95: [0xAF, 0xD7, 0x5F],
    0x96: [0xAF, 0xD7, 0x87],
    0x97: [0xAF, 0xD7, 0xAF],
    0x98: [0xAF, 0xD7, 0xD7],
    0x99: [0xAF, 0xD7, 0xFF],
    0x9A: [0xAF, 0xFF, 0x00],
    0x9B: [0xAF, 0xFF, 0x5F],
    0x9C: [0xAF, 0xFF, 0x87],
    0x9D: [0xAF, 0xFF, 0xAF],
    0x9E: [0xAF, 0xFF, 0xD7],
    0x9F: [0xAF, 0xFF, 0xFF],
    0xA0: [0xD7, 0x00, 0x00],
    0xA1: [0xD7, 0x00, 0x5F],
    0xA2: [0xD7, 0x00, 0x87],
    0xA3: [0xD7, 0x00, 0xAF],
    0xA4: [0xD7, 0x00, 0xD7],
    0xA5: [0xD7, 0x00, 0xFF],
    0xA6: [0xD7, 0x5F, 0x00],
    0xA7: [0xD7, 0x5F, 0x5F],
    0xA8: [0xD7, 0x5F, 0x87],
    0xA9: [0xD7, 0x5F, 0xAF],
    0xAA: [0xD7, 0x5F, 0xD7],
    0xAB: [0xD7, 0x5F, 0xFF],
    0xAC: [0xD7, 0x87, 0x00],
    0xAD: [0xD7, 0x87, 0x5F],
    0xAE: [0xD7, 0x87, 0x87],
    0xAF: [0xD7, 0x87, 0xAF],
    0xB0: [0xD7, 0x87, 0xD7],
    0xB1: [0xD7, 0x87, 0xFF],
    0xB2: [0xD7, 0xAF, 0x00],
    0xB3: [0xD7, 0xAF, 0x5F],
    0xB4: [0xD7, 0xAF, 0x87],
    0xB5: [0xD7, 0xAF, 0xAF],
    0xB6: [0xD7, 0xAF, 0xD7],
    0xB7: [0xD7, 0xAF, 0xFF],
    0xB8: [0xD7, 0xD7, 0x00],
    0xB9: [0xD7, 0xD7, 0x5F],
    0xBA: [0xD7, 0xD7, 0x87],
    0xBB: [0xD7, 0xD7, 0xAF],
    0xBC: [0xD7, 0xD7, 0xD7],
    0xBD: [0xD7, 0xD7, 0xFF],
    0xBE: [0xD7, 0xFF, 0x00],
    0xBF: [0xD7, 0xFF, 0x5F],
    0xC0: [0xD7, 0xFF, 0x87],
    0xC1: [0xD7, 0xFF, 0xAF],
    0xC2: [0xD7, 0xFF, 0xD7],
    0xC3: [0xD7, 0xFF, 0xFF],
    0xC4: [0xFF, 0x00, 0x00],
    0xC5: [0xFF, 0x00, 0x5F],
    0xC6: [0xFF, 0x00, 0x87],
    0xC7: [0xFF, 0x00, 0xAF],
    0xC8: [0xFF, 0x00, 0xD7],
    0xC9: [0xFF, 0x00, 0xFF],
    0xCA: [0xFF, 0x5F, 0x00],
    0xCB: [0xFF, 0x5F, 0x5F],
    0xCC: [0xFF, 0x5F, 0x87],
    0xCD: [0xFF, 0x5F, 0xAF],
    0xCE: [0xFF, 0x5F, 0xD7],
    0xCF: [0xFF, 0x5F, 0xFF],
    0xD0: [0xFF, 0x87, 0x00],
    0xD1: [0xFF, 0x87, 0x5F],
    0xD2: [0xFF, 0x87, 0x87],
    0xD3: [0xFF, 0x87, 0xAF],
    0xD4: [0xFF, 0x87, 0xD7],
    0xD5: [0xFF, 0x87, 0xFF],
    0xD6: [0xFF, 0xAF, 0x00],
    0xD7: [0xFF, 0xAF, 0x5F],
    0xD8: [0xFF, 0xAF, 0x87],
    0xD9: [0xFF, 0xAF, 0xAF],
    0xDA: [0xFF, 0xAF, 0xD7],
    0xDB: [0xFF, 0xAF, 0xFF],
    0xDC: [0xFF, 0xD7, 0x00],
    0xDD: [0xFF, 0xD7, 0x5F],
    0xDE: [0xFF, 0xD7, 0x87],
    0xDF: [0xFF, 0xD7, 0xAF],
    0xE0: [0xFF, 0xD7, 0xD7],
    0xE1: [0xFF, 0xD7, 0xFF],
    0xE2: [0xFF, 0xFF, 0x00],
    0xE3: [0xFF, 0xFF, 0x5F],
    0xE4: [0xFF, 0xFF, 0x87],
    0xE5: [0xFF, 0xFF, 0xAF],
    0xE6: [0xFF, 0xFF, 0xD7],
    0xE7: [0xFF, 0xFF, 0xFF],
}

PALETTE_GRAYSCALE = {
    0xE8: [0x08, 0x08, 0x08],
    0xE9: [0x12, 0x12, 0x12],
    0xEA: [0x1C, 0x1C, 0x1C],
    0xEB: [0x26, 0x26, 0x26],
    0xEC: [0x30, 0x30, 0x30],
    0xED: [0x3A, 0x3A, 0x3A],
    0xEE: [0x44, 0x44, 0x44],
    0xEF: [0x4E, 0x4E, 0x4E],
    0xF0: [0x58, 0x58, 0x58],
    0xF1: [0x62, 0x62, 0x62],
    0xF2: [0x6C, 0x6C, 0x6C],
    0xF3: [0x76, 0x76, 0x76],
    0xF4: [0x80, 0x80, 0x80],
    0xF5: [0x8A, 0x8A, 0x8A],
    0xF6: [0x94, 0x94, 0x94],
    0xF7: [0x9E, 0x9E, 0x9E],
    0xF8: [0xA8, 0xA8, 0xA8],
    0xF9: [0xB2, 0xB2, 0xB2],
    0xFA: [0xBC, 0xBC, 0xBC],
    0xFB: [0xC6, 0xC6, 0xC6],
    0xFC: [0xD0, 0xD0, 0xD0],
    0xFD: [0xDA, 0xDA, 0xDA],
    0xFE: [0xE4, 0xE4, 0xE4],
    0xFF: [0xEE, 0xEE, 0xEE],
}

CUBE_256 = '''
              #00f#06f#08f#0af#0df#0ff
            #60f#00d#06d#08d#0ad#0dd#0fd
          #80f#60d#00a#06a#08a#0aa#0da#0fa
        #a0f#80d#60a#008#068#088#0a8#0d8#0f8
      #d0f#a0d#80d#608#006#066#086#0a6#0d6#0f6
    #f0f#d0d#a0a#808#606#000#060#080#0a0#0d0#0f0#0f6#0f8#0fa#0fd#0ff
      #f0d#d0a#a08#806#600#660#680#6a0#6d0#6f0#6f6#6f8#6fa#6fd#6ff#0df
        #f0a#d08#a06#800#860#880#8a0#8d0#8f0#8f6#8f8#8fa#8fd#8ff#6df#0af
          #f08#d06#a00#a60#a80#aa0#ad0#af0#af6#af8#afa#afd#aff#8df#6af#08f
            #f06#d00#d60#d80#da0#dd0#df0#df6#df8#dfa#dfd#dff#adf#8af#68f#06f
              #f00#f60#f80#fa0#fd0#ff0#ff6#ff8#ffa#ffd#fff#ddf#aaf#88f#66f#00f
                                    #fd0#fd6#fd8#fda#fdd#fdf#daf#a8f#86f#60f
      #66d#68d#6ad#6dd                #fa0#fa6#fa8#faa#fad#faf#d8f#a6f#80f
    #86d#66a#68a#6aa#6da                #f80#f86#f88#f8a#f8d#f8f#d6f#a0f
  #a6d#86a#668#688#6a8#6d8                #f60#f66#f68#f6a#f6d#f6f#d0f
#d6d#a6a#868#666#686#6a6#6d6#6d8#6da#6dd    #f00#f06#f08#f0a#f0d#f0f
  #d6a#a68#866#886#8a6#8d6#8d8#8da#8dd#6ad
    #d68#a66#a86#aa6#ad6#ad8#ada#add#8ad#68d
      #d66#d86#da6#dd6#dd8#dda#ddd#aad#88d#66d
                    #da6#da8#daa#dad#a8d#86d
  #88a#8aa           #d86#d88#d8a#d8d#a6d
#a8a#888#8a8#8aa       #d66#d68#d6a#d6d
  #a88#aa8#aaa#88a
        #a88#a8a
'''.strip('\n')


def strip_escape_codes(text):
    return re.sub('\x1B.*?m', '', text)


def join_templates(templates, separator=' '):
    ''' Merges text templates side by side. '''
    templates = [template.split('\n') for template in templates]
    template_sizes = []
    for template in templates:
        template_sizes.append(
            max(len(strip_escape_codes(line)) for line in template))
    merged_template = ['' for _ in templates[0]]
    for i, template in enumerate(templates):
        for j, line in enumerate(template):
            real_length = len(strip_escape_codes(line))
            merged_template[j] += line
            merged_template[j] += ' ' * (template_sizes[i] - real_length)
            merged_template[j] += separator
    return '\n'.join(merged_template)


def render_system_colors():
    ''' Renders basic system color (i.e. the 16 color palette) ramp. '''
    templates = []
    for fgbg in [48, 38]:
        template = ''
        for color in range(16):
            template += SYSTEM_TEMPLATE.format(fgbg=fgbg, color=color)
            template += '\n' if color % 8 == 7 else ''
        templates.append(template.strip())
    print(join_templates(templates))
    print()


def render_grayscale_ramp():
    ''' Renders basic grayscale ramp. '''
    for fgbg in [48, 38]:
        print('', end='')
        for color in range(232, 256):
            print(RAMP_TEMPLATE.format(fgbg=fgbg, color=color), end='')
        print('')
    print('')


def render_color_cube():
    ''' Renders the XTerm 216 color cube. '''
    templates = []
    for fgbg in [48, 38]:
        def _replace_callback(match):
            color = [int(x, 16) * 16 + int(x, 16) for x in match.group(1)]
            min_diff = None
            ret = ''
            for key, other_color in PALETTE_256.items():
                diff = sum(abs(other_color[i] - color[i]) for i in range(3))
                if min_diff is None or diff < min_diff:
                    ret = CUBE_TEMPLATE.format(fgbg=fgbg, color=key)
                    min_diff = diff
            return ret

        template = re.sub(r'([^#\s]{3})', _replace_callback, CUBE_256)
        template = re.sub('#', '', template)
        template = re.sub('  ', ' ', template)
        templates.append(template)

    print(join_templates(templates))


def main():
    render_system_colors()
    render_grayscale_ramp()
    render_color_cube()


if __name__ == '__main__':
    main()
