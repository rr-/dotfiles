#!/usr/bin/env python3
import os
import sys
import argparse
import subprocess
import tempfile
import shlex


def parse_args():
    parser = argparse.ArgumentParser(
        description='xattrvi - modify xattributes of files the simple way')

    parser.add_argument(
        'filename', type=str, default=None,
        help='file that needs to get modified')

    parser.add_argument(
        '--editor', type=str, default=os.environ.get('EDITOR') or 'nano',
        help='use this particular editor')

    return parser.parse_args()


def newline_escape(string):
    return string.replace('\n', '\\n')


def newline_unescape(string):
    return string.replace('\\n', '\n')


def main():
    args = parse_args()
    # let's get prepared, check if everything is in workingstate

    # test if there is a file supplied at all
    if not args.filename:
        sys.exit()

    # test if that file actually exists
    if not os.path.exists(args.filename):
        print('cannot find what you gave me', file=sys.stderr)
        sys.exit(1)

    # let's get to the actual action! Let's deal with xattributes

    # read out existing xattrs
    xattrs = os.listxattr(args.filename)

    def get_decoded_attr(filename, attr):
        encoded_value = os.getxattr(filename, attr, follow_symlinks=True)
        return encoded_value.decode('utf-8')

    def set_encoded_attr(filename, attr, value):
        candidate = newline_unescape(value)
        encoded_value = candidate.decode('utf-8')
        os.setxattr(args.filename, 'user.' + key, encoded_value)

    userxattrs = []
    for attr in xattrs:
        if attr.startswith('user.'):
            userxattrs.append(
                (
                    attr.split('.', 1)[1],
                    get_decoded_attr(args.filename, attr)
                ))

    otherxattrs = []
    for attr in xattrs:
        if not attr.startswith('user.'):
            otherxattrs.append((attr, get_decoded_attr(args.filename, attr)))

    tmpfile = tempfile.NamedTemporaryFile()

    # present current attributes
    with open(tmpfile.name, 'w') as handle:
        handle.write('# attributes in namespace \'user\':\n\n')
        handle.write('\n'.join([
            '{0:10}   : {1}'.format(key, newline_escape(value))
            for key, value in userxattrs
        ]))

        if len(otherxattrs) > 0:
            handle.write('\n' * 3)
            handle.write('# attributes in other namespaces:\n\n')
            handle.write('\n#'.join([
                '{0:10}   : {1}'.format(key, value)
                for key, value in otherxattrs
            ]))

    args.editor = shlex.split(args.editor)
    retval = subprocess.call(args.editor + [tmpfile.name])

    if retval != 0:
        print(
            '!! Your editor {0} exited nonzero with {1}, '
            'removing stale tmpfile and aborting'.format(args.editor, retval),
            file=sys.stderr)
        sys.exit(1)

    # parse and apply the user's changes
    with open(tmpfile.name, 'r') as handle:
        try:
            # perform simple syntax-check beforehand to print more helpful
            # errors, just in case
            malformed_lines = [
                line.strip()
                for line in handle
                if line.strip()
                and not line.startswith('#')
                and ':' not in line
            ]

            if len(malformed_lines) > 0:
                print('!! aborting, malformed lines in file:', file=sys.stderr)
                for line in malformed_lines:
                    print('>> ' + line, file=sys.stderr)
                    sys.exit(3)

            handle.seek(0)

            # now parse the file
            newuserxattrlist = [
                line.strip().split(':', 1)
                for line in handle
                if line.strip() and not line.startswith('#')
            ]
            newuserxattrs = [
                (key.strip(), newline_unescape(value.strip()))
                for key, value in newuserxattrlist
            ]

        except UnicodeDecodeError:
            print(
                'Errors parsing the file, aborting. '
                'Did you screw up the syntax?',
                file=sys.stderr)
            sys.exit(2)

        # now update the changed attributes
        # remember changed properties for deletion procedure
        changed = []
        for key, value in set(newuserxattrs).difference(set(userxattrs)):
            print(':: updating {0}'.format(key))
            try:
                changed.append(key)
                os.setxattr(
                    args.filename,
                    'user.' + key,
                    newline_unescape(value).encode('utf-8'))
            except UnicodeEncodeError:
                print('!! error encoding {0} : {1}'.format(key, value))

        # now delete all properties that are left over
        # set of all changed and removed attributes
        for key, _ in set(userxattrs).difference(set(newuserxattrs)):
            # then the attribute vanished or key changed
            if key not in changed:
                print(':: removing {0}'.format(key))
                os.removexattr(args.filename, 'user.' + key)


if __name__ == '__main__':
    main()
