#!/usr/bin/env python3
import os
import sys
import argparse
import subprocess
import tempfile
import shlex


def parse_args():
    parser = argparse.ArgumentParser(
        description='xattrvi - modify xattributes of files the simple way')

    parser.add_argument(
        'filename', type=str, default=None,
        help='file that needs to get modified')

    parser.add_argument(
        '--editor', type=str, default=os.environ.get('EDITOR') or 'nano',
        help='use this particular editor')

    args = parser.parse_args()
    args.editor = shlex.split(args.editor)
    return args


def newline_escape(string):
    return string.replace('\n', '\\n')


def newline_unescape(string):
    return string.replace('\\n', '\n')


def dump(user_xattrs, other_xattrs, file):
    file.write('# attributes in namespace \'user\'\n')
    file.write('\n'.join([
        f'{key + ":":10s} {newline_escape(value)}'
        for key, value in user_xattrs
    ]))

    if other_xattrs:
        file.write('\n')
        file.write('# attributes in other namespaces\n')
        file.write('\n'.join([
            f'#{key + ":":10s} {newline_escape(value)}'
            for key, value in other_xattrs
        ]))


def parse(file):
    # perform simple syntax-check beforehand to print more helpful errors,
    # just in case
    malformed_lines = [
        line.strip()
        for line in file
        if line.strip()
        and not line.startswith('#')
        and ':' not in line
    ]

    if malformed_lines:
        print('!! Aborting, malformed lines in file:', file=sys.stderr)
        for line in malformed_lines:
            print(f'>> {line}', file=sys.stderr)
            sys.exit(3)

    file.seek(0)

    return [
        (key.strip(), newline_unescape(value.strip()))
        for key, value in [
            line.strip().split(':', 1)
            for line in file
            if line.strip() and not line.startswith('#')
        ]
    ]


def main():
    args = parse_args()

    user_xattrs = []
    other_xattrs = []
    for attr in os.listxattr(args.filename):
        value = os.getxattr(args.filename, attr, follow_symlinks=True).decode()
        if attr.startswith('user.'):
            user_xattrs.append((attr.split('.', 1)[1], value))
        else:
            other_xattrs.append((attr, value))

    tmpfile = tempfile.NamedTemporaryFile()
    with open(tmpfile.name, 'w') as handle:
        dump(user_xattrs, other_xattrs, file=handle)

    retval = subprocess.call(args.editor + [tmpfile.name])
    if retval != 0:
        print(
            f'!! Editor {args.editor} exited nonzero with {retval}. Aborting.',
            file=sys.stderr)
        sys.exit(1)

    with open(tmpfile.name, 'r') as handle:
        new_user_xattrs = parse(handle)

    # now update the changed attributes
    # remember changed properties for deletion procedure
    changed = []
    for key, value in set(new_user_xattrs).difference(set(user_xattrs)):
        print(f':: updating {key}')
        changed.append(key)
        os.setxattr(
            args.filename,
            'user.' + key,
            newline_unescape(value).encode('utf-8'))

    # now delete all properties that are left over
    # set of all changed and removed attributes
    for key, _ in set(user_xattrs).difference(set(new_user_xattrs)):
        # then the attribute vanished or key changed
        if key not in changed:
            print(f':: removing {key}')
            os.removexattr(args.filename, 'user.' + key)


if __name__ == '__main__':
    main()
