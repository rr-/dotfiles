#!/usr/bin/env python3
import argparse
import hashlib
import subprocess
import time
from datetime import datetime
from typing import List
from pathlib import Path


def _get_paths(target_paths: List[Path]) -> List[str]:
    for target_path in target_paths:
        for path in target_path.iterdir():
            if path.is_dir():
                yield from _get_paths([path])
            elif path.is_file():
                yield path


def _get_checksum(paths: List[str]) -> str:
    digest = hashlib.md5()
    for path in paths:
        try:
            digest.update(path.read_bytes())
        except FileNotFoundError:
            pass
    return digest.hexdigest()


def _parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser('Monitor filesystem for changes')
    parser.add_argument('--sleep', default=1, type=int)
    parser.add_argument('-t', '--target-dir', nargs='*')
    parser.add_argument('cmd', metavar='cmd')
    parser.add_argument('cmd_args', metavar='cmd_arg', nargs='*')
    return parser.parse_args()


def main() -> None:
    args = _parse_args()
    target_dirs: List[Path] = [Path(path) for path in args.target_dir]
    command_line: List[str] = [args.cmd] + args.cmd_args
    sleep_time: int = args.sleep
    last_checksum = None

    while True:
        paths = list(sorted(_get_paths(target_dirs)))
        try:
            current_checksum = _get_checksum(paths)
        except Exception:
            pass
        if current_checksum != last_checksum:
            print('Change detected.')
            start = datetime.now()
            try:
                subprocess.run(command_line)
                print('%s: finished in %.02fs' % (
                    ' '.join(command_line),
                    (datetime.now() - start).total_seconds()))
            except Exception as ex:
                print('%s: error (%s) in %.02fs' % (
                    ' '.join(command_line),
                    ex,
                    (datetime.now() - start).total_seconds()))
            last_checksum = current_checksum

        time.sleep(sleep_time)


if __name__ == '__main__':
    main()
