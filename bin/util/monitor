#!/usr/bin/env python3
import argparse
import hashlib
import subprocess
import time
import typing as T
from datetime import datetime
from pathlib import Path

DEFAULT_EXCLUDE = ["__pycache__"]


def _get_paths(
    target_paths: T.List[Path], exclude: T.List[str]
) -> T.List[str]:
    for target_path in target_paths:
        if target_path.name in exclude:
            continue
        if target_path.is_file():
            yield target_path
        elif target_path.is_dir():
            for path in target_path.iterdir():
                yield from _get_paths([path], exclude)


def _get_checksum(paths: T.List[str]) -> str:
    digest = hashlib.md5()
    for path in paths:
        try:
            digest.update(path.read_bytes())
        except FileNotFoundError:
            pass
    return digest.hexdigest()


def _parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser("Monitor filesystem for changes")
    parser.add_argument("--sleep", default=1, type=int)
    parser.add_argument("--exclude", nargs="*")
    parser.add_argument("-t", "--target-dir", nargs="*")
    parser.add_argument("cmd", metavar="cmd")
    parser.add_argument("cmd_args", metavar="cmd_arg", nargs="*")
    return parser.parse_args()


def main() -> None:
    args = _parse_args()
    exclude: T.List[str] = args.exclude or []
    exclude += DEFAULT_EXCLUDE
    target_dirs: T.List[Path] = [Path(path) for path in args.target_dir]
    command_line: T.List[str] = [args.cmd] + args.cmd_args
    sleep_time: int = args.sleep
    last_checksum = None

    while True:
        paths = list(sorted(set(_get_paths(target_dirs, exclude))))
        try:
            current_checksum = _get_checksum(paths)
        except Exception:
            pass
        if current_checksum != last_checksum:
            print("Change detected.")
            start = datetime.now()
            try:
                subprocess.run(command_line)
                print(
                    "%s: finished in %.02fs"
                    % (
                        " ".join(command_line),
                        (datetime.now() - start).total_seconds(),
                    )
                )
            except Exception as ex:
                print(
                    "%s: error (%s) in %.02fs"
                    % (
                        " ".join(command_line),
                        ex,
                        (datetime.now() - start).total_seconds(),
                    )
                )
            last_checksum = current_checksum

        time.sleep(sleep_time)


if __name__ == "__main__":
    main()
