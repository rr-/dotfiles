#!/usr/bin/env python3.10
import argparse
import re
from dataclasses import dataclass

RGB_REGEX = re.compile(
    r"^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$", flags=re.I
)


@dataclass
class Color:
    r: int
    g: int
    b: int


def rgb(text: str) -> Color:
    match = RGB_REGEX.match(text)
    if not match:
        raise ValueError(f'"{text}" is not a valid color')
    return Color(
        r=int(match.group(1), 16),
        g=int(match.group(2), 16),
        b=int(match.group(3), 16),
    )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("-c1", help="Source color", type=rgb, required=True)
    parser.add_argument("-c2", help="Target color", type=rgb, required=True)
    parser.add_argument(
        "-s", "--steps", help="How many steps to use", type=int, default=10
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    for i in range(args.steps):
        step = i / (args.steps - 1)
        # next_step = (i + 1) / (args.steps - 1)
        c3 = Color(
            int(args.c1.r + step * (args.c2.r - args.c1.r)),
            int(args.c1.g + step * (args.c2.g - args.c1.g)),
            int(args.c1.b + step * (args.c2.b - args.c1.b)),
        )
        print(f"{c3.r:02X}{c3.g:02X}{c3.b:02X}")


if __name__ == "__main__":
    main()
