#!/usr/bin/env python3
# requires: eml-parser
import argparse
import email
import pathlib
import re
from typing import Any, cast

import eml_parser

Message = Any


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        dest="paths", metavar="path", type=pathlib.Path, nargs="+"
    )
    return parser.parse_args()


def get_body_text(parsed: Message) -> str | None:
    # first search for body in the body, then in the attachments
    for key in ("body", "attachment"):
        # first look for plain text version, then accept html
        for mime in ("text/plain", "text/html"):
            for attachment in parsed.get(key, []):
                try:
                    attachment_mime = attachment["mime_type_short"]
                except LookupError:
                    try:
                        attachment_mime = attachment["content_header"][
                            "content-type"
                        ][0]
                    except LookupError:
                        attachment_mime = "application/octet-stream"

                attachment_mime = re.sub(";.*", "", attachment_mime)

                if attachment_mime == mime:
                    try:
                        return cast(str, attachment["content"])
                    except LookupError:
                        return cast(str, attachment["raw"])

    return None


def main() -> None:
    args = parse_args()

    parser = eml_parser.EmlParser(
        include_raw_body=True, include_attachment_data=True
    )

    for i, path in enumerate(args.paths):
        if i > 0:
            print("-" * 79)
            print()

        raw_email = path.read_bytes()
        message = parser.decode_email_bytes(raw_email)

        print("From:    " + message["header"]["from"])
        print("To:      " + ", ".join(message["header"]["to"]))
        print("Subject: " + message["header"]["subject"])
        print()
        print(get_body_text(message))


if __name__ == "__main__":
    main()
