#!/usr/bin/env python3
# requires: progress xdg
import argparse
import hashlib
import pickle
from collections.abc import Callable, Iterable
from pathlib import Path
from typing import Any

import progress.bar
import xdg

CACHE_PATH = Path(xdg.XDG_CACHE_HOME) / "dups.dat"


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("dir", type=Path)
    parser.add_argument("-d", "--delete", action="store_true")
    parser.add_argument("-N", "--no-confirm", action="store_true")
    return parser.parse_args()


def load_cache() -> dict[str, bytes]:
    if CACHE_PATH.exists():
        return pickle.loads(CACHE_PATH.read_bytes())  # type: ignore
    return {}


def save_cache(cache: dict[str, bytes]) -> None:
    CACHE_PATH.parent.mkdir(parents=True, exist_ok=True)
    CACHE_PATH.write_bytes(pickle.dumps(cache))


def clean_cache(cache: dict[str, bytes]) -> None:
    for path, checksum in list(cache.items()):
        if not Path(path).exists():
            del cache[path]


def get_file_hash(path: Path) -> bytes:
    hash_obj = hashlib.md5()
    hash_obj.update(path.read_bytes())
    return hash_obj.digest()


def collect_files(root_dir: Path) -> Iterable[Path]:
    for path in root_dir.iterdir():
        if path.is_file():
            yield path
        elif path.is_dir():
            yield from collect_files(path)


def construct_size_to_path_dict(
    paths: Iterable[Path],
) -> dict[int, list[Path]]:
    ret: dict[int, list[Path]] = {}
    for path in paths:
        size = path.stat().st_size
        if not size in ret:
            ret[size] = []
        ret[size].append(path)
    return ret


def construct_hash_to_path_dict(
    paths: Iterable[Path],
    cache: dict[str, bytes],
    progress_callback: Callable[[], None],
) -> dict[bytes, list[Path]]:
    ret: dict[bytes, list[Path]] = {}
    for path in paths:
        cache_key = str(path.resolve())
        if cache_key in cache:
            checksum = cache[cache_key]
        else:
            checksum = get_file_hash(path)
            cache[cache_key] = checksum
        progress_callback()

        if checksum not in ret:
            ret[checksum] = []
        ret[checksum].append(path)
    return ret


class ProgressBar(progress.bar.IncrementalBar):
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(
            "Working",
            suffix="%(percent).1f%% - %(eta_td)s",
            sma_window=1000,
            **kwargs,
        )

    # @property
    # def eta(self):
    #     now_ts = time.time()
    #     return self.remaining * (now_ts - self.start_ts) / max(1, self.index)


def main() -> None:
    args = parse_args()
    if not args.dir.exists():
        raise RuntimeError(f'Directory "{args.dir}" does not exist')
    if not args.dir.is_dir():
        raise RuntimeError(f'Selected path "{args.dir}" is not a directory')

    print("Loading cache...")
    cache = load_cache()
    print("Loaded", len(cache), "cache entries")

    print("Collecting files...")
    all_files = list(collect_files(args.dir))
    print("Collected", len(all_files), "files")

    print("Constructing size-path dictionary...")
    size_to_path = {
        size: files
        for size, files in construct_size_to_path_dict(all_files).items()
        if len(files) > 1
    }

    print("Checking for duplicates...")
    duplicate_groups = []

    bar = ProgressBar(
        max=sum(len(files) for _size, files in size_to_path.items())
    )
    for size, files in size_to_path.items():

        def update() -> None:
            bar.next()
            if bar.index % 1000 == 999:
                save_cache(cache)

        hash_to_path = construct_hash_to_path_dict(files, cache, update)
        for duplicate_paths in hash_to_path.values():
            if len(duplicate_paths) > 1:
                duplicate_groups.append(duplicate_paths)
    bar.finish()

    print("Duplicates:")
    for i, group in enumerate(duplicate_groups):
        choices = {j + 1: path for j, path in enumerate(group)}

        print(f"-- Group {i + 1} --")
        for num, path in choices.items():
            print(f"[{num}] {path}")
        print("[a] all")
        print()

        if args.delete:
            if args.no_confirm:
                for path in group[1:]:
                    path.unlink()
                continue

            while True:
                try:
                    choice = input("Which file to keep? ").lower()
                    if choice not in "a" and int(choice) not in choices:
                        raise ValueError("Invalid number")
                    break
                except ValueError:
                    pass
            print()

            if choice == "a":
                continue

            for num, path in choices.items():
                if num != int(choice):
                    path.unlink()

    print("Removing non-existing entries from cache...")
    clean_cache(cache)

    print("Saving cache...")
    save_cache(cache)
    print("Saved", len(cache), "cache entries")


if __name__ == "__main__":
    main()
