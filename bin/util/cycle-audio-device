#!/usr/bin/env python3
import json
import platform
import re
import sys
from collections.abc import Iterable
from dataclasses import dataclass
from subprocess import run


@dataclass
class Sink:
    name: str
    profile: str | None
    default: bool


@dataclass
class Card:
    name: str


@dataclass
class AudioDeviceSpec:
    sink_regex: str

    card_regex: str | None = None
    profile: str | None = None

    matched_card: Card | None = None
    matched_sink: Sink | None = None

    def match_card(self, card: Card) -> bool:
        if self.card_regex and re.match(self.card_regex, card.name):
            self.matched_card = card
            return True
        return False

    def match_sink(self, sink: Sink) -> bool:
        if re.match(self.sink_regex, sink.name):
            self.matched_sink = sink
            return True
        return False


MACHINE_SPECS = {
    "lightning": [
        # built-in audio analog stereo
        AudioDeviceSpec(
            sink_regex=r"alsa_output\.pci-0000_00_1f\.3\.analog-stereo",
        ),
        # TV
        AudioDeviceSpec(
            sink_regex=r"alsa_output\.pci-0000_01_00\.1\.hdmi.*",
            card_regex="alsa_card.pci-0000_01_00.1",
            profile="output:hdmi-stereo",
        ),
        # headset
        AudioDeviceSpec(
            sink_regex=r"bluez_sink\..*",
            card_regex=r"bluez_card\..*",
            profile="a2dp_sink",
        ),
    ],
}


def get_default_sink() -> str:
    result = run(
        ["pactl", "get-default-sink"],
        check=True,
        capture_output=True,
        text=True,
    )
    return result.stdout.strip()


def get_all_cards() -> Iterable[Card]:
    result = run(
        ["pactl", "-f", "json", "list", "cards"],
        check=True,
        capture_output=True,
        text=True,
    )
    items = json.loads(result.stdout)
    for item in items:
        yield Card(
            name=item["name"],
        )


def get_all_sinks() -> Iterable[Sink]:
    default_sink = get_default_sink()
    result = run(
        ["pactl", "-f", "json", "list", "sinks"],
        check=True,
        capture_output=True,
        text=True,
    )
    items = json.loads(result.stdout)
    for item in items:
        yield Sink(
            name=item["name"],
            profile=item.get("device.profile.name"),
            default=item["name"] == default_sink,
        )


def set_default_sink(sink: Sink) -> bool:
    print("setting default sink", sink.name)
    run(["pactl", "set-default-sink", sink.name], check=True)
    return get_default_sink() == sink.name


def set_card_profile(card: Card, profile: str) -> None:
    print("setting profile", profile, "for card", card.name)
    run(["pacmd", "set-card-profile", card.name, profile], check=True)


def main() -> None:
    hostname = platform.node()
    specs = MACHINE_SPECS.get(hostname)

    if not specs:
        raise ValueError(f"unknown machine: {hostname}")

    all_cards = list(get_all_cards())

    for card in all_cards:
        for spec in specs:
            if spec.match_card(card) and spec.matched_card and spec.profile:
                set_card_profile(spec.matched_card, spec.profile)

    all_sinks = list(get_all_sinks())
    if not all_sinks:
        raise ValueError("unable to retrieve sinks")

    matched_spec = None
    for spec in specs:
        for sink in all_sinks:
            if spec.match_sink(sink) and sink.default:
                matched_spec = spec
    if not matched_spec:
        matched_spec = specs[-1]

    while specs[-1] != matched_spec:
        specs.append(specs.pop(0))

    for spec in specs:
        if not spec.matched_sink:
            continue

        if not set_default_sink(spec.matched_sink):
            continue

        if spec.matched_card and spec.profile:
            set_card_profile(spec.matched_card, spec.profile)
        return

    raise ValueError(f"unable to find a sink after {default_sink}")


if __name__ == "__main__":
    try:
        main()
    except ValueError as ex:
        print(str(ex), file=sys.stderr)
        exit(1)
