#!/usr/bin/python3 -u
# requires: pyyaml
import os
import sys
from collections.abc import Iterable
from dataclasses import dataclass
from pathlib import Path
from subprocess import run

import yaml


@dataclass
class Command:
    name: str
    invocation: str
    environment: dict[str, str | None] | None = None

    @property
    def usage(self) -> str:
        if "\n" in self.invocation:
            return self.invocation.splitlines()[0] + " (â€¦)"
        return self.invocation


def get_environment(doc) -> dict[str, str | None] | None:
    env = doc.get("environment")
    if not env:
        return env
    return {
        key: str(val) if val is not None else None for key, val in env.items()
    }


def merge_environment(
    *envs: dict[str, str | None] | None
) -> dict[str, str] | None:
    envs = [env for env in envs if env]
    if not envs:
        return None
    ret = envs[0].copy()
    for env in envs[1:]:
        for key, value in env.items():
            if value is None:
                ret.pop(key, None)
            ret[key] = value
    return {
        key: value for key, value in ret.items() if value is not None
    } or None


def get_commands(doc) -> Iterable[Command]:
    yield from (
        Command(name=key, invocation=value)
        if isinstance(value, str)
        else Command(
            name=key,
            invocation=value["command"],
            environment=get_environment(value),
        )
        for key, value in doc["tasks"].items()
    )


def main() -> None:
    workrc_path = Path(".workrc")

    if not workrc_path.exists():
        raise RuntimeError("Missing .workrc file")
    doc = yaml.safe_load(workrc_path.read_text())

    environment = get_environment(doc)
    commands = list(get_commands(doc))

    if len(sys.argv) == 1:
        max_length = max(len(command.name) for command in commands)
        for command in commands:
            print(f"{command.name + ':':<{max_length}s} {command.usage}")
        return

    for command in commands:
        if command.name == sys.argv[1]:
            break
    else:
        raise RuntimeError(f"Unknown command: {sys.argv[1]}")

    full_invocation = ["sh", "-c", command.invocation, "--"] + sys.argv[2:]

    run(
        full_invocation,
        input=sys.stdin.read() if not sys.stdin.isatty() else None,
        text=True,
        check=True,
        env=merge_environment(os.environ, environment, command.environment),
    )


if __name__ == "__main__":
    main()
