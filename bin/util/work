#!/usr/bin/python3 -u
import sys
from collections.abc import Iterable
from dataclasses import dataclass
from pathlib import Path
from subprocess import run

import yaml


@dataclass
class Command:
    name: str
    invocation: str

    @property
    def usage(self) -> str:
        if "\n" in self.invocation:
            return self.invocation.splitlines()[0] + " (â€¦)"
        return self.invocation


def get_commands(workrc_path: Path) -> Iterable[Command]:
    if not workrc_path.exists():
        raise RuntimeError("Missing .workrc file")
    doc = yaml.safe_load(workrc_path.read_text())
    for key, value in doc.items():
        yield Command(name=key, invocation=value)


def main() -> None:
    workrc_path = Path(".workrc")
    commands = list(get_commands(workrc_path))

    if len(sys.argv) == 1:
        max_length = max(len(command.name) for command in commands)
        for command in commands:
            print(f"{command.name + ':':<{max_length}s} {command.usage}")
        return

    for command in commands:
        if command.name == sys.argv[1]:
            invocation = ["sh", "-c", command.invocation, "--"] + sys.argv[2:]
            run(
                invocation,
                input=sys.stdin.read() if not sys.stdin.isatty() else None,
                text=True,
                check=True,
            )
            return

    raise RuntimeError(f"Unknown command: {sys.argv[1]}")


if __name__ == "__main__":
    main()
