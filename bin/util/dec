#!/bin/python3
import argparse
from os import removedirs, makedirs
from os import path
from subprocess import run
from dotfiles import logging

logger = logging.getLogger(__name__)


def _parse_args():
    parser = argparse.ArgumentParser(
        description='Mounts encrypted directories',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('dir', help='which directory to mount')
    parser.add_argument(
        '--source-dir', default='~/.enc', metavar='path',
        help='root directory where the encrypted dir is located')
    parser.add_argument(
        '--target-dir', default='~/', metavar='path',
        help='root directory where to mount the decrypted directory')
    parser.add_argument(
        '-u', '--unmount', action='store_true', help='unmount the directory')
    return parser.parse_args()


def main():
    args = _parse_args()
    source_dir = path.expanduser(path.join(args.source_dir, args.dir))
    target_dir = path.expanduser(path.join(args.target_dir, args.dir))
    if args.unmount:
        logger.info('Unmounting %s', target_dir)
        run(['fusermount', '-u', target_dir])
        try:
            removedirs(target_dir)
        except OSError:
            logger.warning('Failed to remove unmounted directory')
    else:
        logger.info('Mounting %s', target_dir)
        makedirs(target_dir, exist_ok=True)
        run(['gocryptfs', source_dir, target_dir])


if __name__ == '__main__':
    main()
