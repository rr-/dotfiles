#!/usr/bin/python3
import argparse
import json
import os, sys
import re
import readline

try:
    import requests
    import colorama
except ImportError as e:
    if e.name is None:
        raise
    print('Please install %s.' % e.name)
    exit(1)

def colored(str, color):
    color_code = getattr(colorama.Fore, color.upper())
    reset_code = colorama.Style.RESET_ALL
    return color_code + str + reset_code

class Booru(object):
    def __init__(self, url):
        self.session = requests.Session()
        self.api_url = url + '/api'
        self.data_url = url + '/data'

    def get_tags(self):
        r = self.session.get(self.data_url + '/tags.json', verify=False)
        sort = lambda item: -item['usages']
        for word in sorted(json.loads(r.text), key=sort):
            yield word

    def login(self, user, password):
        r = self.verify_response(
            self.session.post(
                self.api_url + '/login',
                data={'userNameOrEmail': user, 'password': password},
                verify=False))
        auth_token = json.loads(r.text)['token']['name']
        self.session.headers.update({'x-authorization-token': auth_token})

    def upload_post(self, post_path, tags, safety):
        with open(post_path, 'rb') as fh:
            files = {'content': fh}
            self.verify_response(
                self.session.post(
                    self.api_url + '/posts',
                    files=files,
                    data={
                        'contentFileName': os.path.basename(post_path),
                        'source': '',
                        'safety': safety,
                        'anonymous': 0,
                        'tags': ' '.join(tags)
                    }))

    def update_post(self, post_id, new_tags, last_edit_time):
        self.verify_response(
            self.session.post(
                self.api_url + '/posts/' + str(post_id),
                data={
                    'tags': ' '.join(new_tags),
                    'lastEditTime': last_edit_time,
                }))

    def get_post(self, post_id):
        r = self.verify_response(
            self.session.get(
                self.api_url + '/posts/' + str(post_id)))
        return json.loads(r.text)['post']

    def verify_response(self, response):
        if response.status_code != 200:
            raise RuntimeError(json.loads(response.text)['error'])
        return response

class Tagger(object):
    def __init__(self, tagger_settings):
        self.chosen_tags = []
        self.install_tag_completer()
        self.tag_dict = {tag['name'].lower(): tag for tag in tagger_settings}
        self.all_tags = [tag['name'].lower() for tag in tagger_settings]

    def install_tag_completer(self):
        for lib in ['libreadline.so', 'libreadline.dll', 'cygreadline7.dll']:
            try:
                import ctypes
                rl = ctypes.cdll.LoadLibrary(lib)
                sort = ctypes.c_ulong.in_dll(rl, 'rl_sort_completion_matches')
                sort.value = 0
            except:
                pass

        def completer(text, state):
            text = text.lower()
            if len(text) >= 3:
                options = [tag for tag in self.all_tags if text in tag]
            else:
                options = [tag for tag in self.all_tags if tag.startswith(text)]
            try:
                return options[state]
            except IndexError:
                return None

        readline.set_completer(completer)
        readline.parse_and_bind('tab: menu-complete')
        readline.parse_and_bind('set rl_sort_completion_matches 0')

    def print(self):
        if not self.chosen_tags:
            print('Current tags: (none)')
        else:
            print('Current tags: %s' % ', '.join(self.chosen_tags))

    def remove(self, tag):
        tag = tag.lower()
        if tag in self.chosen_tags:
            self.chosen_tags.remove(tag)

    def add(self, tag):
        tag = tag.lower()
        if tag in self.chosen_tags:
            return
        self.chosen_tags.append(tag)
        if tag not in self.tag_dict:
            print(colored('Warning: new tag', 'red'))
        elif 'implications' in self.tag_dict[tag]:
            for implied_tag in self.tag_dict[tag]['implications']:
                print(colored('+ ' + implied_tag, 'green'))
                self.add(implied_tag)

    def add_from_user_input(self):
        try:
            while True:
                tag = input('#' + str(len(self.chosen_tags)) + '> ').strip()
                if tag == '':
                    self.print()
                elif tag.startswith('-'):
                    self.remove(tag[1:])
                else:
                    self.add(tag)
                    if tag in self.tag_dict and 'suggestions' in self.tag_dict[tag]:
                        for suggested_tag in self.tag_dict[tag]['suggestions']:
                            print(colored(': ' + suggested_tag, 'yellow'))
        except EOFError:
            print('(EOF)')

    def get(self):
        return self.chosen_tags

def parse_args():
    parser = argparse.ArgumentParser(
        description='Sends post to szurubooru from CLI')
    parser.add_argument('-c', '--config', metavar='CONFIG_PATH',
        help='path to config JSON file', default='~/.config/booru.json')
    parser.add_argument('-w', '--wait', choices=['always', 'errors', 'never'],
        default='never', help='wait before exiting on errors')
    parser.add_argument(metavar='POST_PATH', dest='path',
        help='path to the post')
    return parser.parse_args()

def wait_for_user_input(message='Press Enter to continue...'):
    input(message)

def load_config(path):
    config = {}
    if path:
        path = os.path.expanduser(path)
        if not os.path.exists(path):
            print('Warning: %s does not exist' % path, file=sys.stderr)
        else:
            with open(path, 'r') as fh:
                config = json.load(fh)
    return config

def fill_config(config):
    if 'url' not in config:
        config['url'] = input('Booru URL: ')
    if 'user' not in config:
        config['user'] = input('User: ')
    if 'password' not in config:
        from getpass import getpass
        config['password'] = getpass('Password: ')

def update_tags(b, tagger_settings, post_id, chosen_tags):
    post = b.get_post(post_id)

    tmp_tagger = Tagger(tagger_settings)
    for tag in post['tags']:
        tmp_tagger.add(tag['name'])
    existing_tags = set(tmp_tagger.get())
    new_tags = set([t for t in chosen_tags if t not in existing_tags])

    if not new_tags:
        print('No new tags.')
    else:
        print('Existing tags: %s' % ', '.join(existing_tags))
        print('New tags: %s' % ', '.join(new_tags))
        wait_for_user_input('Press Enter to add new tags, Ctrl+C to exit...')
        b.update_post(post_id, new_tags | existing_tags, post['lastEditTime'])
        print('Tags merge successful!')

def upload(b, tagger_settings, args):
    if not os.path.exists(args.path):
        raise RuntimeError('Post file does not exist')

    print('Entering tagging mode.')
    print('^D to finish,')
    print('^C to abort')

    tagger = Tagger(tagger_settings)
    tagger.add_from_user_input()

    safety = 'safe'
    for s in ['safe', 'sketchy', 'unsafe']:
        if s in tagger.get():
            safety = s
            tagger.remove(s)

    chosen_tags = set(tagger.get())

    print('Tags: %s' % ', '.join(chosen_tags))
    print('Safety: %s' % safety)

    try:
        b.upload_post(args.path, chosen_tags, safety)
        print('Upload succesful!')
    except Exception as e:
        if 'duplicate' not in str(e).lower():
            raise
        print(e)
        post_id = int(re.search('([0-9]+)', str(e)).group(0))
        update_tags(b, tagger_settings, post_id, chosen_tags)

def main():
    colorama.init()
    requests.packages.urllib3.disable_warnings()

    args = parse_args()
    try:
        config = load_config(args.config)
        fill_config(config)

        b = Booru(config['url'])
        b.login(config['user'], config['password'])

        tagger_settings = list(b.get_tags())
        tagger_settings.insert(0, {'name': 'unsafe', 'usages': 999999})
        tagger_settings.insert(0, {'name': 'sketchy', 'usages': 999999})
        tagger_settings.insert(0, {'name': 'safe', 'usages': 999999})

        upload(b, tagger_settings, args)

        if args.wait == 'always':
            wait_for_user_input()
    except Exception as e:
        print('Upload unsuccesful...')
        print(e)
        if args.wait in ['error', 'errors', 'always']:
            wait_for_user_input()

if __name__ == '__main__':
    main()
