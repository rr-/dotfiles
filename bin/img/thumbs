#!/usr/bin/env python3
# Generates HTML thumbnails.

import argparse
import json
import os
import pathlib
import re
import sys
from subprocess import run
from tempfile import NamedTemporaryFile


def natural_sort_key(text, _nsre=re.compile('([0-9]+)')):
    return [
        int(term)
        if term.isdigit() else term.lower()
        for term in re.split(_nsre, text)]


MANAGED_EXTENSIONS = ['jpg', 'jpeg', 'jfif', 'gif', 'png', 'tga', 'bmp']

HTML_TEMPLATE = '''<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <style>
        body {
            font-family: sans-serif;
            text-align: center;
            background: black;
        }
        ul {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            list-style-type: none;
        }
        li {
            display: inline-block;
            width: 20vh;
            margin: 0.5em;
            padding: 0;
        }
        a {
            margin: auto;
            display: inline-block;
        }
        img {
            max-width: 20vh;
            max-height: 20vh;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            border: 1px solid black;
            box-sizing: border-box;
            vertical-align: top;
        }
        #pager {
            margin-top: 1em;
        }
        #pager a {
            background: #333;
            color: #eee;
            padding: 0.2em 0.5em;
            margin: 0.5em 0.1em;
        }
        #pager a.active {
            background: peachpuff;
            color: #333;
        }
    </style>
    <title>Thumbnail list</title>
</head>
<body>
<div id="content"><ul></ul></div>
<div id="pager"></div>

<script type="text/javascript">
class Pager {
    constructor(pagerDiv, collection, pageSize, showPage) {
        this.collection = collection;
        this.pagerDiv = pagerDiv;
        this.pageSize = pageSize;
        this.pageCount = Math.ceil(collection.length / pageSize);
        this.showPage = showPage;

        const prevPageLink = document.createElement('a');
        const nextPageLink = document.createElement('a');
        prevPageLink.appendChild(document.createTextNode('<'));
        nextPageLink.appendChild(document.createTextNode('>'));
        prevPageLink.addEventListener(
            'click', e => this.prevPageLinkClicked(e));
        nextPageLink.addEventListener(
            'click', e => this.nextPageLinkClicked(e));

        pagerDiv.appendChild(prevPageLink);
        for (let page = 1; page <= this.pageCount; page++) {
            const pageLink = document.createElement('a');
            pageLink.appendChild(document.createTextNode(page));
            pageLink.setAttribute('data-page', page);
            pageLink.addEventListener('click', e => this.pageLinkClicked(e));
            pagerDiv.appendChild(pageLink);
        }
        pagerDiv.appendChild(nextPageLink);

        this.activatePage(1);
    }

    activatePage(number) {
        const lastActivePageLink = this.pagerDiv.querySelector('.active');
        const currentActivePageLink = (
            this.pagerDiv.querySelector('[data-page=\\'' + number + '\\']'));

        if (lastActivePageLink) {
            lastActivePageLink.classList.remove('active');
        }
        currentActivePageLink.classList.add('active');

        this.activePage = number;
        this.showPage(
            this.collection.slice(
                (this.activePage - 1) * this.pageSize,
                this.activePage * this.pageSize));
    }

    prevPageLinkClicked(e) {
        e.preventDefault();
        if (this.activePage - 1 >= 1) {
            this.activatePage(this.activePage - 1);
        }
    }

    nextPageLinkClicked(e) {
        e.preventDefault();
        if (this.activePage + 1 <= this.pageCount) {
            this.activatePage(this.activePage + 1);
        }
    }

    pageLinkClicked(e) {
        e.preventDefault();
        this.activatePage(parseInt(e.target.getAttribute('data-page')));
    }
}

function showPage(collection) {
    const contentList = document.querySelector('#content ul');
    while (contentList.firstChild) {
        contentList.removeChild(contentList.firstChild);
    }

    for (let item of collection) {
        const listItem = document.createElement('li');
        const imageLink = document.createElement('a');
        const image = document.createElement('img');
        imageLink.setAttribute('href', item.link);
        image.setAttribute('src', item.link);
        image.setAttribute('alt', item.name);
        imageLink.appendChild(image);
        listItem.appendChild(imageLink);
        contentList.appendChild(listItem);
    }
}

const pageSize = 250;
const collection = %JSON%;
const pagerDiv = document.getElementById('pager');
const pager = new Pager(pagerDiv, collection, pageSize, showPage);
</script>
</body>
</html>
'''


def _parse_args():
    parser = argparse.ArgumentParser(
        description='Generates thumbnails using a HTML page.')
    parser.add_argument('paths', metavar='path', nargs='+')
    return parser.parse_args()


def _collect_files(paths):
    for path in paths:
        if os.path.isdir(path):
            for entry in os.scandir(path):
                if not entry.is_file:
                    continue
                ext = os.path.splitext(entry.path)[1].lstrip('.').lower()
                if ext in MANAGED_EXTENSIONS:
                    yield entry.path
        elif os.path.isfile(path):
            yield path


def main():
    args = _parse_args()

    paths = sorted(_collect_files(args.paths), key=natural_sort_key)
    if not paths:
        print('No images to show', file=sys.stderr)
        return

    with NamedTemporaryFile(delete=False, prefix='thumbs', mode='w') as handle:
        images = [
            {
                'link': pathlib.Path(os.path.abspath(path)).as_uri(),
                'name': path,
            }
            for path in paths
        ]
        handle.write(HTML_TEMPLATE.replace('%JSON%', json.dumps(images)))
        handle.flush()
        run(['firefox', handle.name])


if __name__ == '__main__':
    main()
