#!/usr/bin/env python3
import colorsys
import logging
import math
import multiprocessing
import os
import typing as T
from pathlib import Path

from PIL import Image

SOURCE_DIR = 'big'
TARGET_DIR = 'big-sorted'
Color = T.Tuple[float, float, float]


def step(color: Color, repetitions: int = 1) -> Color:
    r, g, b = color
    lum = math.sqrt(0.241 * r + 0.691 * g + 0.068 * b)
    h, s, v = colorsys.rgb_to_hsv(r, g, b)
    h2 = int(h * repetitions)
    lum2 = int(lum * repetitions)
    v2 = int(v * repetitions)
    return (h2, lum, v2)


def average_color(image: Image) -> Color:
    colour_tuple: T.List[float] = [0, 0, 0]
    for channel in range(3):
        pixels = image.getdata(band=channel)
        colour_tuple[channel] = sum(pixels) / len(pixels)
    return T.cast(Color, tuple(colour_tuple))


def remove_symlinks(dir: str) -> None:
    if os.path.exists(dir):
        root, directories, files = next(os.walk(dir, followlinks=False))
        paths = [os.path.join(root, file) for file in files]
        symlinks = [path for path in paths if Path(path).is_symlink()]
        for path in symlinks:
            os.remove(path)


def worker(path):
    logging.info('Getting average color for %s' % path)
    try:
        with Image.open(path) as image:
            color = average_color(image)
            return color
    except:
        return (0, 0, 0)


def get_paths_sorted_by_avg_color(dir: str) -> T.List[str]:
    logging.info('Computing average colors...')
    paths = [os.path.abspath(file.path) for file in os.scandir(SOURCE_DIR)]
    paths = paths
    pool = multiprocessing.Pool()
    colors = pool.map(worker, paths)
    items = sorted(zip(colors, paths), key=lambda item: step(item[0], 8))
    return [item[1] for item in items]


def make_symlinks(source_paths: T.List[str], target_dir: str) -> None:
    for i, source_path in enumerate(source_paths):
        target_path = os.path.join(
            target_dir, '%d_%s' % (i, os.path.basename(source_path))
        )
        logging.info('%s -> %s', source_path, target_path)
        os.symlink(source_path, target_path)


def main() -> None:
    remove_symlinks(TARGET_DIR)
    os.makedirs(TARGET_DIR, exist_ok=True)
    sorted_source_paths = get_paths_sorted_by_avg_color(SOURCE_DIR)
    make_symlinks(sorted_source_paths, TARGET_DIR)


if __name__ == '__main__':
    logging.getLogger().setLevel(logging.INFO)
    main()
