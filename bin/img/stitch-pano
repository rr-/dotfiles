#!/usr/bin/env python3.10
# Copyright (c) 2018 rr-
# Copyright (c) 2013 Matthew Petroff
#
# Dependencies: autooptimiser, convert, cpclean, cpfind, enblend, nona,
#               pto_gen, pano_modify, pano_trafo, pto_var
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import argparse
import glob
import os
import sys
import tempfile
from collections.abc import Iterable
from dataclasses import dataclass
from pathlib import Path
from subprocess import PIPE, CalledProcessError, run


@dataclass
class Point:
    x: float
    y: float


@dataclass
class ControlPoint(Point):
    img: int


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Stitch scanned segments.")
    parser.add_argument(
        "input_files",
        metavar="N",
        nargs="+",
        help="files to be stitched",
        type=Path,
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="output_file",
        default=Path("output.jpg"),
        help="output name (default: output.jpg)",
        type=Path,
    )
    parser.add_argument(
        "--preserve-pto",
        action="store_true",
        help="keep the .pto panorama spec file",
    )
    return parser.parse_args()


def make_pto_file(pto_file: Path, input_files: list[Path]) -> None:
    run(["pto_gen", "-o", pto_file] + input_files, check=True)


def find_control_points(pto_file: Path) -> None:
    run(
        [
            "cpfind",
            "--fullscale",
            "--multirow",
            "--sieve1size",
            "500",
            "--sieve2width",
            "20",
            "--sieve2height",
            "20",
            "-o",
            pto_file,
            pto_file,
        ],
        check=True,
    )


def set_image_params_to_optimize(pto_file: Path) -> None:
    run(
        ["pto_var", "--opt", "r,TrX,TrY", "-o", pto_file, pto_file], check=True
    )


def remove_incorrect_control_points(pto_file: Path) -> None:
    run(["cpclean", "-n", "1", "-o", pto_file, pto_file], check=True)
    run(["cpclean", "-o", pto_file, pto_file], check=True)


def optimize_rotation_and_translation(pto_file: Path) -> None:
    run(["autooptimiser", "-n", "-o", pto_file, pto_file], check=True)


def get_control_points(pto_file: Path) -> Iterable[ControlPoint]:
    with pto_file.open() as handle:
        for line in handle:
            if line.startswith("c"):
                args = {group[0]: group[1:] for group in line.split()[1:]}
                yield ControlPoint(
                    img=int(args["n"]), x=float(args["x"]), y=float(args["y"])
                )
                yield ControlPoint(
                    img=int(args["N"]), x=float(args["X"]), y=float(args["Y"])
                )


def pano_trafo(
    pto_file: Path, control_points: list[ControlPoint], reverse: bool = False
) -> list[Point]:
    result = run(
        ["pano_trafo"] + (["-r"] if reverse else []) + [pto_file],
        check=True,
        input="\n".join(
            f"{cp.img} {cp.x} {cp.y}" for cp in control_points
        ).encode(),
        stdout=PIPE,
    )

    return [
        Point(float(line.split()[0]), float(line.split()[1]))
        for line in result.stdout.decode().splitlines()
    ]


def morph_images_to_fit_control_points(
    pto_file: Path, tmp_dir: Path, input_files: list[Path]
) -> None:
    control_points = list(get_control_points(pto_file))

    trafo_points = pano_trafo(pto_file, control_points)

    morphed_control_points: list[ControlPoint] = []
    for i in range(len(control_points) // 2):
        img1 = control_points[i * 2].img
        img2 = control_points[i * 2 + 1].img
        x = (trafo_points[i * 2].x + trafo_points[i * 2 + 1].x) / 2
        y = (trafo_points[i * 2].y + trafo_points[i * 2 + 1].y) / 2
        morphed_control_points.append(ControlPoint(img=img1, x=x, y=y))
        morphed_control_points.append(ControlPoint(img=img2, x=x, y=y))

    rev_trafo_points = pano_trafo(
        pto_file, morphed_control_points, reverse=True
    )

    control_points_for_imagick: dict[int, list[Point]] = {
        i: [] for i in range(len(input_files))
    }
    for control_point, rev_trafo_point in zip(
        control_points, rev_trafo_points
    ):
        control_points_for_imagick[control_point.img].append(control_point)
        control_points_for_imagick[control_point.img].append(rev_trafo_point)

    pto_content = pto_file.read_text()
    for i, input_file in enumerate(input_files):
        print(f"morphing image: {input_file}")

        image_name = tmp_dir / f"m{i}.tif"
        run(
            [
                "convert",
                input_file,
                "-compress",
                "LZW",
                "-distort",
                "Shepards",
                " ".join(
                    f"{point.x},{point.y}"
                    for point in control_points_for_imagick[i]
                ),
                image_name,
            ],
            check=True,
        )
        pto_content = pto_content.replace(str(input_file), str(image_name))

    pto_file.write_text(pto_content)


def stitch_images(pto_file: Path, tmp_dir: Path) -> Path:
    tmp_output_file = tmp_dir / "output.tif"

    run(
        [
            "pano_modify",
            "-p",
            "0",
            "--fov=AUTO",
            "--canvas=AUTO",
            "--crop=AUTO",
            "-o",
            pto_file,
            pto_file,
        ],
        check=True,
    )

    run(["nona", "-o", tmp_dir / "remapped", pto_file], check=True)

    remapped_paths = [
        str(path)
        for path in tmp_dir.iterdir()
        if path.name.startswith("remapped")
    ]
    run(
        [
            "enblend",
            "--primary-seam-generator=graph-cut",
            "-o",
            tmp_output_file,
        ]
        + remapped_paths,
        check=True,
    )

    return tmp_output_file


def convert_image(source_path: Path, target_path: Path) -> None:
    run(["convert", source_path, target_path], check=True)


def main() -> None:
    args = parse_args()

    try:
        with tempfile.TemporaryDirectory() as tmp_dir_name:
            tmp_dir = Path(tmp_dir_name)

            pto_file = args.output_file.with_suffix(".pto")

            make_pto_file(pto_file, args.input_files)
            find_control_points(pto_file)
            set_image_params_to_optimize(pto_file)
            remove_incorrect_control_points(pto_file)
            optimize_rotation_and_translation(pto_file)

            morph_images_to_fit_control_points(
                pto_file, tmp_dir, args.input_files
            )

            tmp_output_file = stitch_images(pto_file, tmp_dir)
            if not args.preserve_pto:
                pto_file.unlink()

            convert_image(tmp_output_file, args.output_file)

    except CalledProcessError as ex:
        print(ex.stderr, file=sys.stderr)
        raise


if __name__ == "__main__":
    main()
