#!/bin/python3
import sys
import argparse
from dotfiles import iqdb
from dotfiles import logging


logger = logging.getLogger(__name__)
GOOD_MATCH_THRESHOLD = 0.95
POSSIBLE_MATCH_THRESHOLD = 0.85

GOOD_MATCH_FOUND = 0
POSSIBLE_MATCH_FOUND = 1
NO_MATCH_FOUND = 2


def _parse_args():
    parser = argparse.ArgumentParser(description='Searches for image via IQDB')
    parser.add_argument(
        metavar='POST_PATH', dest='path', help='path to the image')
    return parser.parse_args()


def _output_header(text):
    margin = (40 - len(text)) // 2
    line = '-' * margin
    logger.info('%s %s %s', line, text, line)


def _output_results(results):
    for result in sorted(results, key=lambda _: _.url):
        text = '[%3.0f%%, %5dx%-5d] %s' % (
            result.similarity * 100, result.width, result.height, result.url)

        if result.similarity >= GOOD_MATCH_THRESHOLD:
            logger.success(text)
        elif result.similarity >= POSSIBLE_MATCH_THRESHOLD:
            logger.warning(text)
        else:
            logger.error(text)


def main():
    args = _parse_args()
    results = iqdb.search(args.path)

    main_results = [_ for _ in results if _.main]
    extra_results = [_ for _ in results if not _.main]

    if not main_results:
        logger.error('No direct matches')
        return

    logger.info('Input: %dx%d', results.input_width, results.input_height)
    logger.info('')
    _output_header('Main results')
    _output_results(main_results)
    if extra_results:
        logger.info('')
        _output_header('Additional results')
        _output_results(extra_results)

    if any(r for r in results if r.similarity >= GOOD_MATCH_THRESHOLD):
        sys.exit(GOOD_MATCH_FOUND)
    if any(r for r in results if r.similarity >= POSSIBLE_MATCH_THRESHOLD):
        sys.exit(POSSIBLE_MATCH_FOUND)
    sys.exit(NO_MATCH_FOUND)


if __name__ == '__main__':
    logging.getLogger('requests').setLevel(logging.WARNING)
    main()
