#!/bin/python3
import os
import sys
import argparse
import pathlib
from dotfiles import iqdb
from dotfiles import logging


logger = logging.getLogger(__name__)
GOOD_MATCH_THRESHOLD = 0.95
POSSIBLE_MATCH_THRESHOLD = 0.85

GOOD_MATCH_FOUND = 0
POSSIBLE_MATCH_FOUND = 1
NO_MATCH_FOUND = 2


def _parse_args():
    parser = argparse.ArgumentParser(description='Searches for image via IQDB')
    parser.add_argument('path', help='path to the image', nargs='+')
    parser.add_argument(
        '-f', '--filter', help='filter the results by URL', default='')
    return parser.parse_args()


def _output_results(results):
    for result in sorted(results, key=lambda _: _.url):
        text = '[%3.0f%%, %5sx%-5s] %s' % (
            result.similarity * 100,
            result.width or '?',
            result.height or '?',
            result.url)

        if result.similarity >= GOOD_MATCH_THRESHOLD:
            logger.success(text)
        elif result.similarity >= POSSIBLE_MATCH_THRESHOLD:
            logger.warning(text)
        else:
            logger.error(text)


def _process_path(path, filter=''):
    logger.info('Input file: %s', path)
    logger.info('Input URL: %s', pathlib.Path(os.path.abspath(path)).as_uri())
    results = iqdb.search(path)

    for result in reversed(results):
        if filter not in result.url:
            results.remove(result)

    main_results = [_ for _ in results if _.main]
    extra_results = [_ for _ in results if not _.main]

    if not main_results:
        logger.error('No direct matches')
        logger.info('')
        return NO_MATCH_FOUND

    logger.info(
        'Input resolution: %sx%s',
        results.input_width or '?',
        results.input_height or '?')

    _output_results(main_results)
    if extra_results:
        _output_results(extra_results)
    logger.info('')

    if any(r for r in results if r.similarity >= GOOD_MATCH_THRESHOLD):
        return GOOD_MATCH_FOUND
    if any(r for r in results if r.similarity >= POSSIBLE_MATCH_THRESHOLD):
        return POSSIBLE_MATCH_FOUND
    return NO_MATCH_FOUND


def main():
    args = _parse_args()
    exit_code = 0
    for path in args.path:
        exit_code = max(exit_code, _process_path(path, args.filter))
    sys.exit(exit_code)


if __name__ == '__main__':
    logging.getLogger('requests').setLevel(logging.WARNING)
    main()
