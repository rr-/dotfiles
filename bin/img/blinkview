#!/usr/bin/env python3
import argparse
import os
import re
import sys
import typing as T
from functools import partial
from pathlib import Path
from subprocess import run

from PyQt5 import Qt, QtCore, QtGui

PAGE_WIDTH = 2
PAGE_HEIGHT = 2
IMAGES_PER_PAGE = PAGE_WIDTH * PAGE_HEIGHT
MANAGED_EXTENSIONS = [
    'bmp', 'gif', 'jfif', 'jpeg', 'jpg', 'mkv', 'mp4', 'png', 'tga', 'webm'
]


class Label(Qt.QLabel):
    def __init__(self):
        super(Label, self).__init__()
        self.pixmap: T.Optional[QtGui.QPixmap] = None

    def changePixmap(self, img):
        self.pixmap = QtGui.QPixmap(img)
        self.repaint()

    def paintEvent(self, event):
        size = self.size()
        painter = QtGui.QPainter(self)
        if self.pixmap is None:
            return
        scaled_pixmap = self.pixmap.scaled(
            size,
            QtCore.Qt.KeepAspectRatio,
            transformMode=QtCore.Qt.SmoothTransformation,
        )
        point = QtCore.QPoint(
            (size.width() - scaled_pixmap.width()) / 2,
            (size.height() - scaled_pixmap.height()) / 2,
        )
        painter.drawPixmap(point, scaled_pixmap)


class ImageViewer(Qt.QMainWindow):
    def __init__(self, image_paths: T.List[Path], target_path: Path) -> None:
        super(ImageViewer, self).__init__()

        self._image_paths = image_paths
        self._target_path = target_path
        self._index = 0

        self.imageLabels = [Label() for i in range(IMAGES_PER_PAGE)]
        self.setWindowTitle('blinkview')
        self.resize(500, 400)

        imageGrid = Qt.QWidget()
        imageGrid.setLayout(Qt.QGridLayout())
        for y in range(PAGE_HEIGHT):
            for x in range(PAGE_WIDTH):
                i = x + y * PAGE_WIDTH
                self.imageLabels[i].setScaledContents(True)
                imageGrid.layout().addWidget(self.imageLabels[i], y, x)

        self.statusLabel = Qt.QLabel()
        self.statusBar = Qt.QStatusBar()
        self.statusBar.addPermanentWidget(self.statusLabel)

        self.mainWidget = Qt.QWidget()
        self.mainWidget.setLayout(Qt.QVBoxLayout())
        self.mainWidget.layout().addWidget(imageGrid, 1)
        self.mainWidget.layout().addWidget(self.statusBar, 0)
        self.setCentralWidget(self.mainWidget)

        self.setupColors()
        self.setupShortcuts()
        self.updateImageLabels()

    def setupColors(self) -> None:
        p = self.palette()
        p.setColor(QtGui.QPalette.Window, QtCore.Qt.black)
        p.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
        self.setPalette(p)

    def toggleFullscreen(self) -> None:
        if self.windowState() & QtCore.Qt.WindowFullScreen:
            self.showNormal()
        else:
            self.showFullScreen()

    def setupShortcuts(self) -> None:
        Qt.QShortcut(Qt.QKeySequence('ctrl+q'), self, self.close)
        Qt.QShortcut(Qt.QKeySequence('q'), self, self.close)
        Qt.QShortcut(Qt.QKeySequence('k'), self, self.prevPage)
        Qt.QShortcut(Qt.QKeySequence('j'), self, self.nextPage)
        Qt.QShortcut(Qt.QKeySequence('f'), self, self.toggleFullscreen)

        index_to_key: T.Dict[int, str] = {
            0: '1',
            1: '2',
            2: '3',
            3: '4',
            4: '5',
            5: '6',
            6: '7',
            7: '8',
            8: '9',
            9: '0',
        }
        for i in range(IMAGES_PER_PAGE):
            try:
                key = index_to_key[i]
            except KeyError:
                continue
            Qt.QShortcut(Qt.QKeySequence(key), self, partial(self.save, i))

    def save(self, image_index: int) -> None:
        try:
            source_path = self._image_paths[self._index + image_index]
        except IndexError:
            self.showText('Bad image selected')
        run(['mpi', '--select', str(source_path)])
        # target_path = self._target_path.joinpath(source_path.name)
        # self.showText('Saved to {}'.format(target_path))
        # target_path.write_bytes(source_path.read_bytes())

    def prevPage(self) -> None:
        self.navigate(-IMAGES_PER_PAGE)

    def nextPage(self) -> None:
        self.navigate(IMAGES_PER_PAGE)

    def navigate(self, delta: int) -> None:
        if not self._image_paths:
            return
        self._index += delta
        if self._index < 0:
            self._index = 0
        if self._index > len(self._image_paths):
            self._index = (
                len(self._image_paths) // IMAGES_PER_PAGE
            ) * IMAGES_PER_PAGE
        self.updateImageLabels()

    def showText(self, text: str) -> None:
        print(text)

        label = Qt.QLabel()
        label.setText(text)
        self.statusBar.addWidget(label)

        def hide() -> None:
            self.statusBar.removeWidget(label)

        Qt.QTimer.singleShot(1000, hide)

    def updateImageLabels(self) -> None:
        if not self._image_paths:
            return

        self.mainWidget.setUpdatesEnabled(False)
        self.statusLabel.setText(
            'Showing: {}..{} / {} ({:.02%})'.format(
                self._index,
                self._index + IMAGES_PER_PAGE - 1,
                len(self._image_paths),
                self._index / len(self._image_paths),
            )
        )

        for i in range(IMAGES_PER_PAGE):
            try:
                file_path = self._image_paths[self._index + i]
            except IndexError:
                self.imageLabels[i].changePixmap(None)
                continue

            image = QtGui.QImage(str(file_path))
            if image.isNull():
                self.showText('Cannot load {}.'.format(file_path))
                break
            self.imageLabels[i].changePixmap(QtGui.QPixmap.fromImage(image))
        self.mainWidget.setUpdatesEnabled(True)


def collect_images(source_paths: T.List[Path]) -> T.List[Path]:
    ret: T.List[Path] = []
    for path in source_paths:
        if path.is_dir():
            for entry in os.scandir(path):
                if not entry.is_file:
                    continue
                ext = os.path.splitext(entry.path)[1].lstrip('.').lower()
                if ext in MANAGED_EXTENSIONS:
                    ret.append(Path(entry.path))
        elif os.path.isfile(path):
            ret.append(path)

    # remove the duplicates
    ret = list(set(ret))

    # sort alphanumerically
    def convert(text):
        return int(text) if text.isdigit() else text.lower()

    ret.sort(
        key=lambda key: [convert(c) for c in re.split('([0-9]+)', key.name)]
    )

    return ret


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description='Run mpv as image viewer')
    parser.add_argument(
        metavar='SOURCE_PATH',
        nargs='*',
        dest='source_paths',
        help='path to the image or a directory',
        default=['.'],
    )
    parser.add_argument(
        '-t',
        '--target-dir',
        metavar='TARGET_PATH',
        dest='target_path',
        help='path where to put the saved images',
        default='~',
    )

    args = parser.parse_args()
    args.source_paths = [
        Path(path).expanduser().resolve() for path in args.source_paths
    ]
    args.target_path = Path(args.target_path).expanduser().resolve()
    return args


def main() -> None:
    args = parse_args()
    source_paths: T.List[Path] = args.source_paths
    target_path: Path = args.target_path

    image_paths = collect_images(source_paths)

    app = Qt.QApplication(sys.argv)
    imageViewer = ImageViewer(image_paths, target_path)
    imageViewer.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
