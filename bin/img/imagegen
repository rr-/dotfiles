#!/usr/bin/env python3
import argparse
import asyncio
import base64
import math
import mimetypes
import os
import shutil
import tempfile
import time
from datetime import datetime
from itertools import cycle
from pathlib import Path

import magic
from openai import AsyncOpenAI, BadRequestError


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Generate images using OpenAI API"
    )
    parser.add_argument("prompt", type=str, help="Prompt to generate image")
    parser.add_argument(
        "-s",
        "--size",
        type=str,
        default="auto",
        choices=["1024x1024", "1536x1024", "1024x1536", "auto"],
        help="Size of the image",
    )
    parser.add_argument(
        "-quality",
        "--quality",
        type=str,
        default="auto",
        choices=["high", "medium", "low"],
        help="Quality of the image",
    )
    parser.add_argument(
        "-n", "--num", type=int, default=1, help="How many images to generate"
    )
    parser.add_argument(
        "--output-dir",
        type=Path,
        default=Path("."),
        help="Directory to save the image",
    )
    return parser.parse_args()


def save_image(encoded_data: str, output_dir: Path) -> None:
    decoded_data = base64.b64decode(encoded_data)

    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(decoded_data)
        temp_file.flush()
        temp_file.seek(0)
        mime_type = magic.Magic(mime=True).from_file(temp_file.name)
        extension = mimetypes.guess_extension(mime_type) or ".bin"
        temp_file.close()  # Close the file to move it

        file_name = (
            f"image_{datetime.now().strftime('%Y%m%d%H%M%S')}{extension}"
        )
        output_path = output_dir / file_name
        shutil.move(temp_file.name, output_path)

    print(f"Saved image to {output_path}")


async def _timer() -> None:
    start = time.monotonic()
    throbber = cycle("⠈⠐⠠⢀⡀⠄⠂⠁")
    while True:
        elapsed = math.floor(time.monotonic() - start)
        print(
            f"\r{next(throbber)} Generating images… Elapsed time: {elapsed:.0f}s",
            end="",
            flush=True,
        )
        await asyncio.sleep(0.25)


async def _main_async(args: argparse.Namespace) -> None:
    client = AsyncOpenAI(api_key=os.environ["OPENAI_API_KEY"])
    timer_task = asyncio.create_task(_timer())
    try:
        response = await client.images.generate(
            prompt=args.prompt,
            n=args.num,
            size=args.size,
            quality=args.quality,
            model="gpt-image-1",
            moderation="low",
        )
    except BadRequestError as ex:
        print("\nError:")
        print(ex.body.get("message", ex))
    else:
        print()  # clear timer line
        for image in response.data:
            save_image(image.b64_json, args.output_dir)
    finally:
        timer_task.cancel()
        try:
            await timer_task
        except asyncio.CancelledError:
            pass


def main() -> None:
    args = parse_arguments()
    asyncio.run(_main_async(args))


if __name__ == "__main__":
    main()
