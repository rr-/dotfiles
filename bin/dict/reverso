#!/usr/bin/env python3
import argparse
import io
import re
import readline  # pylint: disable=unused-import
import typing as T
import urllib.parse
import urllib.request

import lxml.etree

from libdotfiles.text import pager

COLOR_RESET = "\x1B[0m"
COLOR_HIGHLIGHT = "\x1B[38;5;%dm\x1B[48;5;%dm" % (223, 58)
COLOR_ERROR = "\x1B[38;5;%dm\x1B[48;5;%dm" % (196, 52)
COLOR_PROMPT = "\x1B[38;5;%dm\x1B[48;5;%dm" % (194, 64)

BASE_URL = "http://context.reverso.net/translation/"
USER_AGENT = (
    "Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/10.0"
)
LANG_MAP = {
    "ar": "arabic",
    "de": "german",
    "en": "english",
    "es": "spanish",
    "fr": "french",
    "he": "hebrew",
    "it": "italian",
    "ja": "japanese",
    "nl": "dutch",
    "pl": "polish",
    "pt": "portuguese",
    "ro": "romanian",
    "ru": "russian",
}


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Looks up phrases on reverso.net"
    )
    parser.add_argument(
        "-n", "--no-conjugations", action="store_false", dest="conjugate"
    )
    parser.add_argument(
        "-s",
        "--source-lang",
        metavar="src-lang",
        default="en",
        dest="src_lang",
        choices=LANG_MAP.keys(),
    )
    parser.add_argument(
        "-d",
        "--dest-lang",
        metavar="dst-lang",
        default="pl",
        dest="dst_lang",
        choices=LANG_MAP.keys(),
    )
    parser.add_argument(
        "-N",
        action="store_false",
        dest="use_pager",
        help="disable pager in interactive mode",
    )
    parser.add_argument("phrase", nargs="?")
    return parser.parse_args()


def _format_html(node: lxml.etree.Element) -> str:
    inner_html = lxml.etree.tostring(node, encoding="unicode")
    inner_html = inner_html.replace("<em>", COLOR_HIGHLIGHT).replace(
        "</em>", COLOR_RESET
    )
    inner_html = re.sub("&#(\d+);", lambda m: chr(int(m.group(1))), inner_html)
    inner_html = re.sub("<[^>]*>", "", inner_html)
    inner_html = inner_html.strip()
    return inner_html


def lookup_context_phrase(
    src_language: str, dst_language: str, conjugate: bool, phrase: str
) -> T.Iterable[T.Tuple[str, str]]:
    url = (
        BASE_URL
        + f"{src_language}-{dst_language}/"
        + f"{urllib.parse.quote(phrase)}"
        + f"?d={conjugate:d}"
    )

    request = urllib.request.Request(
        url=url, headers={"User-Agent": USER_AGENT}
    )

    try:
        with urllib.request.urlopen(request) as handle:
            content = handle.read()
            doc = lxml.etree.HTML(content)
            for example_node in doc.cssselect("div.example"):
                src_node = example_node.cssselect("div.src span.text")[0]
                dst_node = example_node.cssselect("div.trg span.text")[0]
                yield (_format_html(src_node), _format_html(dst_node))
    except urllib.error.HTTPError as ex:
        if ex.code == 404:
            return
        raise


def main() -> None:
    args = parse_args()

    def work(phrase: str) -> None:
        results = list(
            lookup_context_phrase(
                LANG_MAP[args.src_lang],
                LANG_MAP[args.dst_lang],
                args.conjugate,
                phrase,
            )
        )

        with io.StringIO() as file:
            if results:
                for src, dst in results:
                    print(src, file=file)
                    print(dst, file=file)
                    print(file=file)
            else:
                print(COLOR_ERROR + "no results" + COLOR_RESET, file=file)

            if args.use_pager:
                pager(file.getvalue())
            else:
                print(file.getvalue(), end="")

    if args.phrase:
        work(args.phrase)
    else:
        while True:
            try:
                phrase = input(COLOR_PROMPT + "reverso> " + COLOR_RESET)
            except (EOFError, KeyboardInterrupt):
                break
            work(phrase)


if __name__ == "__main__":
    main()
