#!/usr/bin/env python3
import argparse
import io
import urllib.request
from dataclasses import dataclass
from enum import IntEnum
from typing import Iterable, TextIO
from urllib.parse import quote

import lxml.etree

from libdotfiles.text import pager, print_in_columns

COLOR_RESET = "\x1B[0m"
COLOR_HIGHLIGHT = "\x1B[38;5;%dm\x1B[48;5;%dm" % (223, 58)
COLOR_PROMPT = "\x1B[38;5;%dm\x1B[48;5;%dm" % (194, 64)

SYNONYMS_URL = "https://www.wordhippo.com/what-is/another-word-for/{}.html"
MEANINGS_URL = (
    "https://www.wordhippo.com/what-is/the-meaning-of-the-word/{}.html"
)
USER_AGENT = (
    "Mozilla/5.0 (X11; Linux x86_64; rv:10.0) Gecko/20100101 Firefox/10.0"
)


class LookupMode(IntEnum):
    SYNONYMS = 1
    MEANINGS = 2


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Looks up phrases on wordhippo.com"
    )
    parser.add_argument(
        "-s", action="store_const", dest="mode", const=LookupMode.SYNONYMS
    )
    parser.add_argument(
        "-d", action="store_const", dest="mode", const=LookupMode.MEANINGS
    )
    parser.add_argument(
        "-N",
        action="store_false",
        dest="use_pager",
        help="disable pager in interactive mode",
    )
    parser.add_argument("phrase", nargs="?")
    ret = parser.parse_args()
    if not getattr(ret, "mode", None):
        ret.mode = LookupMode.SYNONYMS
    return ret


@dataclass
class SynonymGroup:
    word_type: str
    word_desc: str
    synonyms: list[str]


@dataclass
class MeaningGroup:
    word_type: str
    meanings: list[str]


def get_text_from_node(node: lxml.etree.Element) -> str:
    return "".join(node.itertext())


def download_to_string(url: str) -> str:
    request = urllib.request.Request(
        url=url, headers={"User-Agent": USER_AGENT}
    )
    with urllib.request.urlopen(request) as handle:
        return handle.read().decode()


def get_synonyms(phrase: str) -> Iterable[SynonymGroup]:
    url = SYNONYMS_URL.format(quote(phrase))
    content = download_to_string(url)
    doc = lxml.etree.HTML(content)
    for word_desc_node in doc.cssselect("div.tabdesc"):
        word_type_node = word_desc_node.getprevious()
        related_word_nodes = word_desc_node.getnext().cssselect("div.wb a")
        yield SynonymGroup(
            word_type=(word_type_node.text or "").strip(),
            word_desc=get_text_from_node(word_desc_node),
            synonyms=list(map(get_text_from_node, related_word_nodes)),
        )


def get_meanings(phrase: str) -> Iterable[MeaningGroup]:
    url = MEANINGS_URL.format(quote(phrase))
    content = download_to_string(url)
    doc = lxml.etree.HTML(content)
    for word_type_node in doc.cssselect("div.defv2wordtype"):
        meaning_word_nodes = word_type_node.getnext().cssselect(
            ".topleveldefinition li"
        )
        yield MeaningGroup(
            word_type=get_text_from_node(word_type_node),
            meanings=list(map(get_text_from_node, meaning_word_nodes)),
        )


def show_synonyms(phrase: str, file: TextIO) -> None:
    for synonym_group in get_synonyms(phrase):
        print(
            COLOR_HIGHLIGHT
            + f"{synonym_group.word_type} ({synonym_group.word_desc})"
            + COLOR_RESET,
            file=file,
        )
        print_in_columns(
            (synonym for synonym in synonym_group.synonyms), file=file
        )


def show_meanings(phrase: str, file: TextIO) -> None:
    for meaning_group in get_meanings(phrase):
        print(
            COLOR_HIGHLIGHT + f"{meaning_group.word_type}" + COLOR_RESET,
            file=file,
        )
        for meaning in meaning_group.meanings:
            print(f"- {meaning}", file=file)
        print(file=file)


def main() -> None:
    args = parse_args()

    def work(phrase: str) -> None:
        with io.StringIO() as file:
            func = {
                LookupMode.SYNONYMS: show_synonyms,
                LookupMode.MEANINGS: show_meanings,
            }[args.mode]
            func(phrase, file=file)

            if args.use_pager:
                pager(file.getvalue())
            else:
                print(file.getvalue(), end="")

    if args.phrase:
        work(args.phrase)
    else:
        while True:
            try:
                phrase = input(COLOR_PROMPT + "wordhippo> " + COLOR_RESET)
            except (EOFError, KeyboardInterrupt):
                break
            work(phrase)


if __name__ == "__main__":
    main()
