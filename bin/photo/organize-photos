#!/usr/bin/env python3
# requires: python-dateutil
import argparse
import json
import re
import sys
from collections.abc import Callable, Iterable
from dataclasses import dataclass
from datetime import datetime
from functools import cache
from pathlib import Path
from subprocess import TimeoutExpired, run
from typing import TypeVar

import dateutil.parser

ROOT_DIR = Path(__file__).parent

FILENAME_DATE_REGEX = re.compile(
    r"(?P<year>20\d{2})"
    r"(?P<month>\d{2})"
    r"(?P<day>\d{2})"
    r"_"
    r"(?P<hour>\d{2})"
    r"(?P<minute>\d{2})"
    r"(?P<second>\d{2})"
    r"_(?P<device>\w+)"
    r"(?:_(?P<discriminator>\w+))?"
    r"(?P<extension>\.\w+)$"
)

IMAGE_SUFFIXES = {".png", ".jpg"}
RAW_SUFFIXES = {".cr2", ".nef", ".raf"}
VIDEO_SUFFIXES = {".mp4", ".mov", ".avi"}
RAW_PROCESSING_SUFFIXES = {".xmp"}

ALL_SUFFIXES = (
    IMAGE_SUFFIXES | RAW_SUFFIXES | VIDEO_SUFFIXES | RAW_PROCESSING_SUFFIXES
)

T = TypeVar("T")


@dataclass
class ImageInfo:
    time: datetime | None
    device: str | None
    discriminator: str | None


def chunks(source: list[T], n: int) -> Iterable[list[T]]:
    n = max(1, n)
    return (source[i : i + n] for i in range(0, len(source), n))


def get_creation_date_from_exif(
    source_path: Path, exif: dict[str, str]
) -> datetime | None:
    filename_regex = (
        r"(?!<\d)(?P<year>\d{4})([-_]?)(?P<month>\d{2})\2(?P<day>\d{2})[-_ ]"
        r"(?P<hour>\d{2})([-_:]?)(?P<minute>\d{2})\6(?P<second>\d{2})(?!=\d)"
    )
    if match := re.search(filename_regex, source_path.name, flags=re.I):
        year = int(match.group("year"))
        month = int(match.group("month"))
        day = int(match.group("day"))
        hour = int(match.group("hour"))
        minute = int(match.group("minute"))
        second = int(match.group("second"))
        try:
            return datetime.strptime(
                f"{year:04d}{month:02d}{day:02d}_{hour:02d}{minute:02d}{second:02d}",
                "%Y%m%d_%H%M%S",
            )
        except ValueError:
            pass
    if value := exif.get("CreateDate"):
        return dateutil.parser.parse(value)
    return None


def get_file_number_from_exif(
    source_path: Path, exif: dict[str, str]
) -> int | None:
    filename_regex = r"(?:dscf?|z9|z8|d850)_?(\d{4,5})\b"
    if value := exif.get("FileNumber"):
        return int(value)
    if (value := exif.get("RawFileName")) and (
        match := re.search(filename_regex, value, flags=re.I)
    ):
        return int(match.group(1))
    if match := re.search(filename_regex, source_path.name, flags=re.I):
        return int(match.group(1))
    return None


class ImageInfoFactory:
    def get_from_path(self, source_path: Path) -> ImageInfo | None:
        result = self.get_from_paths([source_path])
        return result[source_path]

    def get_from_paths(
        self,
        source_paths: Iterable[Path],
    ) -> dict[Path, ImageInfo | None]:
        result: dict[Path, ImageInfo | None] = {}
        for source_path in source_paths:
            result[source_path] = self.get_from_path(source_path)
        return result


class FileNameImageInfoFactory(ImageInfoFactory):
    def get_from_path(self, source_path: Path) -> ImageInfo | None:
        if match := FILENAME_DATE_REGEX.match(source_path.name):
            year = int(match.group("year"))
            month = int(match.group("month"))
            day = int(match.group("day"))
            hour = int(match.group("hour"))
            minute = int(match.group("minute"))
            second = int(match.group("second"))
            creation_date = datetime.strptime(
                f"{year:04d}{month:02d}{day:02d}_{hour:02d}{minute:02d}{second:02d}",
                "%Y%m%d_%H%M%S",
            )
            return ImageInfo(
                time=creation_date,
                device=match.group("device"),
                discriminator=match.group("discriminator"),
            )
        return None


class ExifToolImageInfoFactory(ImageInfoFactory):
    MAX_TIMEOUT = 3

    def get_from_paths(
        self,
        source_paths: Iterable[Path],
    ) -> dict[Path, ImageInfo | None]:
        result: dict[Path, ImageInfo | None] = {}

        source_paths = list(source_paths)
        if not source_paths:
            return result

        try:
            output = run(
                [
                    "exiftool",
                    "-CreateDate",
                    "-Model",
                    "-FileNumber",
                    "-RawFileName",
                    "-j",
                    "-d",
                    "%Y-%m-%dT%H:%M:%S%z",
                    *source_paths,
                ],
                check=False,
                capture_output=True,
                text=True,
                timeout=self.MAX_TIMEOUT,
            ).stdout
        except TimeoutExpired:
            print(
                f"timeout while getting exif info for {source_paths}",
                file=sys.stderr,
            )
            return result

        try:
            exif_infos = json.loads(output)
        except ValueError:
            exif_infos = None

        if not exif_infos:
            return result

        for source_path, exif in zip(source_paths, exif_infos):
            creation_date = get_creation_date_from_exif(source_path, exif)
            file_number = get_file_number_from_exif(source_path, exif)
            result[source_path] = ImageInfo(
                time=creation_date,
                device=exif.get("Model"),
                discriminator=f"{file_number:04d}" if file_number else None,
            )

        return result


class FFMPEGImageInfoFactory(ImageInfoFactory):
    MAX_TIMEOUT = 3

    def get_from_path(self, source_path: Path) -> ImageInfo | None:
        try:
            output = run(
                [
                    "ffprobe",
                    "-i",
                    str(source_path),
                    "-print_format",
                    "json",
                    "-show_entries",
                    "format_tags=creation_time",
                ],
                check=False,
                capture_output=True,
                text=True,
                timeout=self.MAX_TIMEOUT,
            ).stdout
        except TimeoutExpired:
            print(
                f"timeout while getting ffmpeg info for {source_path}",
                file=sys.stderr,
            )
            return None

        try:
            return ImageInfo(
                time=dateutil.parser.parse(
                    json.loads(output)["format"]["tags"]["creation_time"]
                ),
                device=None,
                discriminator=None,
            )
        except KeyError:
            return None


def normalize_device(device: str) -> str:
    return {
        "NIKON D850": "D850",
        "NIKON Z 8": "Z8",
        "NIKON Z 9": "Z9",
        "NIKON Z fc": "Zfc",
        "Galaxy S23 Ultra": "S23U",
    }.get(device, device.replace(" ", "-"))


def get_target_paths(
    root_dir: Path,
    source_paths: list[Path],
    include_day_dir: bool,
) -> Iterable[tuple[Path, Path | None]]:
    info_map: dict[Path, ImageInfo | None] = {
        source_path: None for source_path in source_paths
    }

    for factory_cls in ImageInfoFactory.__subclasses__():
        factory = factory_cls()
        info_map.update(
            factory.get_from_paths(
                path for path, info in info_map.items() if not info
            )
        )

    for source_path, info in info_map.items():
        if not info or not info.time:
            continue

        parts = [
            f"{info.time:%Y%m%d_%H%M%S}",
            normalize_device(info.device) if info.device else None,
            f"{info.discriminator}" if info.discriminator else None,
        ]
        target_name = (
            "_".join(str(part) for part in parts if part) + source_path.suffix
        )

        if include_day_dir:
            target_path = (
                source_path.parent
                / info.time.strftime("%Y-%m-%d")
                / target_name
            )
        else:
            target_path = source_path.parent / target_name

        yield (source_path, target_path)


def collect_files(path: Path, suffixes: Iterable[str]) -> list[Path]:
    return sorted(
        (
            path.absolute()
            for path in path.iterdir()
            if path.is_file() and path.suffix.lower() in suffixes
        ),
        key=lambda path: path.name,
    )


def move(
    root_dir: Path,
    source_path: Path,
    target_path: Path,
    dry_run: bool,
    overwrite_existing_files: bool,
) -> None:
    if target_path.exists() and source_path.samefile(target_path):
        return
    if not dry_run:
        target_path.parent.mkdir(parents=True, exist_ok=True)
    if overwrite_existing_files or not target_path.exists():
        print(
            f"Moving {source_path.relative_to(root_dir)} to {target_path.relative_to(root_dir)}"
        )
        if not dry_run:
            source_path.rename(target_path)
    else:
        print(
            f"Moving {source_path.relative_to(root_dir)} to {target_path.relative_to(root_dir)}: target already exists"
        )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("root_dir", type=Path, default=ROOT_DIR, nargs="?")
    parser.add_argument("-c", "--chunk-size", type=int, default=10)
    parser.add_argument(
        "-D",
        "--day-dir",
        action="store_true",
        help="Include day directory in the target path",
    )
    parser.add_argument("-d", "--dry-run", action="store_true")
    parser.add_argument(
        "-o",
        "--overwrite",
        action="store_true",
        dest="overwrite_existing_files",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()

    for i, chunk in enumerate(
        chunks(
            collect_files(args.root_dir, suffixes=ALL_SUFFIXES),
            n=args.chunk_size,
        ),
        1,
    ):
        print(f"processing chunk #{i}", file=sys.stderr)
        for source_path, target_path in get_target_paths(
            root_dir=args.root_dir,
            source_paths=chunk,
            include_day_dir=args.day_dir,
        ):
            if target_path is None:
                print(f"Unknown image: {source_path}")
                continue

            move(
                args.root_dir.absolute(),
                source_path,
                target_path,
                dry_run=args.dry_run,
                overwrite_existing_files=args.overwrite_existing_files,
            )


if __name__ == "__main__":
    main()
