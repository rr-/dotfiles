#!/usr/bin/env python3
import argparse
from collections.abc import Iterable
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from pathlib import Path
from subprocess import run

from tqdm import tqdm

DEFAULT_WIDTH = 3840
DEFAULT_HEIGHT = 2160
DOWNSIZED_SUFFIX = "-sm"
SUFFIXES = (".jpg", ".JPG")


def get_target_path(source_path: Path) -> Path:
    return source_path.with_stem(f"{source_path.stem}{DOWNSIZED_SUFFIX}")


def collect_files(path: Path) -> Iterable[Path]:
    if isinstance(path, list):
        for subpath in path:
            yield from collect_files(subpath)
    elif path.is_dir():
        for subpath in path.iterdir():
            if subpath.is_file() and subpath.suffix in SUFFIXES:
                yield from (collect_files(subpath))
    elif (
        path.is_file()
        and not path.stem.endswith(DOWNSIZED_SUFFIX)
        and not get_target_path(path).exists()
    ):
        yield path


def resize(
    source_path: Path,
    target_path: Path,
    width: int,
    height: int,
    dry_run: bool,
) -> bool:
    if target_path.exists():
        return False

    if not dry_run:
        target_path.parent.mkdir(parents=True, exist_ok=True)
        run(
            [
                "convert",
                source_path,
                "-resize",
                f"{width}x{height}",
                target_path,
            ],
            check=True,
        )

    return True


def move(source_path: Path, target_path: Path, dry_run: bool) -> bool:
    if target_path.exists():
        return False
    if not dry_run:
        target_path.parent.mkdir(parents=True, exist_ok=True)
        source_path.rename(target_path)
    return True


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=Path, default=Path("."), nargs="*")
    parser.add_argument("-w", "--width", type=int, default=DEFAULT_WIDTH)
    parser.add_argument("-H", "--height", type=int, default=DEFAULT_HEIGHT)
    parser.add_argument("-d", "--dry-run", action="store_true")
    return parser.parse_args()


def resize_with_progress(
    source_path: Path, progress: tqdm, args: argparse.Namespace
) -> None:
    target_path = get_target_path(source_path)
    progress.set_description(f"Resizing {source_path} to {target_path}")
    progress.update()
    resize(
        source_path,
        target_path,
        width=args.width,
        height=args.height,
        dry_run=args.dry_run,
    )


def main() -> None:
    args = parse_args()
    files = sorted(collect_files(args.path))

    with tqdm(total=len(files)) as progress:
        with ThreadPoolExecutor() as pool:
            pool.map(
                partial(resize_with_progress, progress=progress, args=args),
                files,
            )


if __name__ == "__main__":
    main()
