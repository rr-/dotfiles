#!/usr/bin/env python3
import argparse
from collections.abc import Iterable
from pathlib import Path

import numpy
from PIL import Image

from libdotfiles import logging


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=Path, nargs="+", default=Path("."))
    parser.add_argument(
        "-o", "--output", type=Path, default=Path("average.jpg")
    )
    return parser.parse_args()


def find_image_paths(paths: list[Path]) -> Iterable[Path]:
    for path in paths:
        if path.is_dir():
            yield from path.glob("*.jpg")
        else:
            yield path


def average_images(paths: list[Path]) -> Image:
    image = Image.open(paths[0])
    width, height = image.size

    arr = numpy.zeros((height, width, 3), dtype=float)
    for i, path in enumerate(paths):
        logging.info(f"{i/len(paths):.02%}: {path}")
        subimage = numpy.array(Image.open(path), dtype=float)
        arr = arr + subimage / len(paths)

    # Round values in array and cast as 8-bit integer
    arr = numpy.array(numpy.round(arr), dtype=numpy.uint8)

    return Image.fromarray(arr, mode="RGB")


def main() -> None:
    args = parse_args()
    paths = list(find_image_paths(args.path))

    image = average_images(paths)
    image.save(args.output)


if __name__ == "__main__":
    main()
