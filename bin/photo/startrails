#!/usr/bin/env python3
import argparse
import tempfile
from pathlib import Path
from shutil import copy
from subprocess import run

import tqdm


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("path", nargs="+", type=Path)
    parser.add_argument("-o", "--output", type=Path, default=None)
    parser.add_argument(
        "-c",
        "--compose-mode",
        type=str,
        default="lighten",
    )
    parser.add_argument(
        "-l",
        "--levels",
        help="0%,75% for -c darken, 25%,100% for -c lighten",
        type=str,
        default="",
    )
    return parser.parse_args()


def my_run(cmd: list[str]) -> None:
    run(cmd, check=True)


def compose(
    input_paths: list[Path], output_path: Path, compose_mode: str, levels: str
) -> None:
    with tempfile.TemporaryDirectory() as tmpdir, tqdm.tqdm(
        total=len(input_paths) + 1, unit_scale=True
    ) as pbar:
        work_path = Path(tmpdir) / "output.tif"

        layer_path = input_paths[0]
        my_run(["convert", f"{layer_path}[0]", "-alpha", "off", work_path])
        pbar.update()

        for layer_path in input_paths[1:]:
            my_run(
                [
                    "convert",
                    work_path,
                    "(",
                    f"{layer_path}[0]",
                    *(["-level", levels] if levels else []),
                    ")",
                    "-compose",
                    compose_mode,
                    "-gravity",
                    "center",
                    "-composite",
                    work_path,
                ]
            )
            pbar.update()

        my_run(["convert", work_path, output_path])
        pbar.update()


def main() -> None:
    args = parse_args()

    output_path = (
        args.output
        if args.output
        else f"{args.path[0].stem}..{args.path[-1].stem}{args.path[0].suffix}"
    )

    compose(
        args.path,
        output_path=output_path,
        compose_mode=args.compose_mode,
        levels=args.levels,
    )


if __name__ == "__main__":
    main()
