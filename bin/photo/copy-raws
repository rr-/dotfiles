#!/usr/bin/env python3
import argparse
import re
from collections.abc import Iterable
from functools import cache
from pathlib import Path

RAW_SUFFIXES = {".cr2", ".nef", ".raf"}
STRIP_PATTERNS = {r"-(.*)"}
JPEG_SUFFIXES = {".jpeg", ".jpg"}


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=(
            "Copy RAW files from a given directory for which "
            "corresponding JPEG files have NOT been deleted."
        )
    )
    parser.add_argument("-d", "--dry-run", action="store_true")
    parser.add_argument("-s", "--source", type=Path)
    parser.add_argument("-t", "--target", type=Path, default=Path("."))
    return parser.parse_args()


@cache
def find_files(path: Path) -> list[Path]:
    return list(path.iterdir())


def find_jpegs(directory: Path) -> Iterable[Path]:
    return (
        path
        for path in sorted(find_files(directory))
        if path.suffix.lower() in JPEG_SUFFIXES
    )


def case_insensitive_exists(path: Path) -> Path | None:
    for p in find_files(path.parent):
        if p.name.lower() == path.name.lower():
            return p
    return None


def find_raw(source_directory: Path, jpeg_path: Path) -> Path | None:
    stem = jpeg_path.stem

    for suffix in RAW_SUFFIXES:
        if raw_path := case_insensitive_exists(
            source_directory / (stem + suffix)
        ):
            return raw_path

    for pattern in STRIP_PATTERNS:
        stem = re.sub(pattern, "", stem)

    for suffix in RAW_SUFFIXES:
        if raw_path := case_insensitive_exists(
            source_directory / (stem + suffix)
        ):
            return raw_path
    return None


def main() -> None:
    args = parse_args()
    jpeg_paths = list(find_jpegs(args.target))
    print("Found", len(jpeg_paths), "jpeg files")
    for jpeg_path in jpeg_paths:
        print(f"{jpeg_path}... ", end="")
        if target_raw_path := find_raw(args.target, jpeg_path):
            print(f"Raw already copied: {target_raw_path}")
        elif source_raw_path := find_raw(args.source, jpeg_path):
            target_raw_path = args.target / (
                jpeg_path.stem + source_raw_path.suffix
            )
            assert target_raw_path
            print(f"Copying {source_raw_path} to {target_raw_path}")
            if not args.dry_run:
                target_raw_path.write_bytes(source_raw_path.read_bytes())
        else:
            print("Unable to find RAW!")


if __name__ == "__main__":
    main()
