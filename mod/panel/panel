#!/usr/bin/env python3
import os
import sys
import threading
import time
import signal
from PyQt5 import QtWidgets
from PyQt5 import QtCore
from PyQt5 import QtGui

import settings
from widgets.workspaces import WorkspacesWidget, WorkspacesUpdater
from widgets.window_title import WindowTitleWidget
from widgets.time import TimeWidget
from widgets.volume import VolumeWidget
from widgets.cpu import CpuWidget
from widgets.net import NetworkUsageWidget
from widgets.battery import BatteryWidget
from widgets.music import MpdWidget
from widgets.stretch import StretchWidget


class MainWindow(QtWidgets.QMainWindow):
    trigger = QtCore.pyqtSignal(object)

    def __init__(self, monitors):
        super().__init__()
        self.setWindowFlags(
            QtCore.Qt.SplashScreen
            | QtCore.Qt.WindowStaysOnTopHint
            | QtCore.Qt.X11BypassWindowManagerHint)
        self.setFixedSize(
            sum([int(m.width) for m in monitors]), settings.HEIGHT)
        self.move(0, 0)
        self.show()

        # font = QtWidgets.QApplication.font()
        # font.setStyleStrategy(QtGui.QFont.NoAntialias)
        # QtWidgets.QApplication.setFont(font)

        self.setStyleSheet('''
        QMainWindow {
            background: #000;
            border-bottom: ''' + str(settings.BOTTOM_BORDER) + '''px solid #bbb;
        }
        QWidget {
            color: #ddd;
            font-family: 'DejaVu Sans';
            font-weight: 500;
            font-size: 13px;
        }
        [class=left] QWidget {
            margin: 1px 3px 3px 0;
        }
        [class=right] QWidget {
            margin: 1px 0 3px 3px;
        }
        QWidget[class=workspace] {
            background: #111;
            height: 10px;
            width: 10px;
            margin: 3px 0 4px 4px;
            padding: 0;
            color: transparent;
            border: 1px solid #808080;
        }
        QWidget[class=workspace][ws_free=False] {
            background: #999;
            border: 1px solid #808080;
        }
        QWidget[class=workspace][ws_focused=True][ws_free=True] {
            border: 2px solid #0cc;
            width: 8px;
            height: 8px;
        }
        QWidget[class=workspace][ws_focused=True][ws_free=False] {
            border: 2px solid #0ee;
            background: #0aa;
            width: 8px;
            height: 8px;
        }
        QWidget[class=workspace][ws_urgent=True] {
            background: #dd4000;
            border: 2px solid #ffa000;
            width: 8px;
            height: 8px;
        }
        QWidget[class=wintitle] {
            margin-left: 8px;
        }
        ''')

        central_widget = QtWidgets.QWidget()
        central_widget.setLayout(QtWidgets.QHBoxLayout(margin=0, spacing=0))
        self.setCentralWidget(central_widget)

        self.monitor_widgets = []
        for monitor in monitors:
            monitor_widget = QtWidgets.QWidget(
                size=QtCore.QSize(int(monitor.width), 0))
            monitor_widget.setLayout(
                QtWidgets.QHBoxLayout(margin=0, spacing=12))
            central_widget.layout().addWidget(monitor_widget)
            self.monitor_widgets.append(monitor_widget)

        self.trigger.connect(self.render)

    def render(self, renderer):
        renderer()

    def reloadStyleSheet(self):
        old_stylesheet = self.styleSheet()
        self.setStyleSheet('')
        self.setStyleSheet(old_stylesheet)

    def __len__(self):
        return len(self.monitor_widgets)

    def __getitem__(self, index):
        return self.monitor_widgets[index]


def main():
    app = QtWidgets.QApplication([os.fsencode(arg) for arg in sys.argv])
    workspaces_updater = WorkspacesUpdater()
    main_window = MainWindow(workspaces_updater.monitors)

    widgets = [
        WorkspacesWidget(main_window, workspaces_updater),
        WindowTitleWidget(main_window, workspaces_updater),
        StretchWidget(main_window),
        MpdWidget(main_window),
        NetworkUsageWidget(main_window),
        BatteryWidget(main_window),
        CpuWidget(main_window),
        VolumeWidget(main_window),
        TimeWidget(main_window)
    ]

    def worker(widget, trigger):
        while True:
            widget.refresh()
            if widget.delay > 0:
                time.sleep(widget.delay)
            trigger.emit(widget.render)

    for widget in widgets:
        t = threading.Thread(
            target=worker, args=(widget, main_window.trigger), daemon=True)
        t.start()

    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app.exec_()


if __name__ == '__main__':
    main()
