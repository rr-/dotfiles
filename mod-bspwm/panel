#!/usr/bin/env python3
import os, sys
import threading
import time
import signal
from PyQt5 import QtWidgets
from PyQt5 import QtCore
from PyQt5 import QtGui

__builtins__.BOTTOM_BORDER = 0
__builtins__.HEIGHT = 19 + BOTTOM_BORDER

from widgets.flow_layout  import FlowLayout
from widgets.workspaces   import WorkspacesProvider
from widgets.window_title import WindowTitleProvider
from widgets.time         import TimeProvider
from widgets.volume       import VolumeProvider
from widgets.cpu          import CpuProvider
from widgets.net          import NetworkUsageProvider
from widgets.battery      import BatteryProvider
from widgets.mpd          import MpdProvider

class MainWindow(QtWidgets.QMainWindow):
    trigger = QtCore.pyqtSignal(object)

    def __init__(self, monitors):
        super().__init__()
        self.setWindowFlags(QtCore.Qt.SplashScreen | QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.X11BypassWindowManagerHint)
        self.setFixedSize(sum([int(m.width) for m in monitors]), HEIGHT)
        self.move(0, 0)
        self.show()

        #font = QtWidgets.QApplication.font()
        #font.setStyleStrategy(QtGui.QFont.NoAntialias)
        #QtWidgets.QApplication.setFont(font)

        self.setStyleSheet('''
        QMainWindow {
            background: #000;
            border-bottom: ''' + str(BOTTOM_BORDER) + '''px solid #bbb;
        }
        QWidget {
            color: #ddd;
            font-family: 'DejaVu Sans';
            font-weight: 500;
            font-size: 13px;
        }
        [class=left] QWidget {
            margin: 1px 3px 3px 0;
        }
        [class=right] QWidget {
            margin: 1px 0 3px 3px;
        }
        QWidget[class=workspace] {
            background: #111;
            height: 10px;
            width: 10px;
            margin: 3px 0 4px 4px;
            padding: 0;
            color: transparent;
            border: 1px solid #808080;
        }
        QWidget[class=workspace][ws_free=False] {
            background: #999;
            border: 1px solid #808080;
        }
        QWidget[class=workspace][ws_focused=True][ws_free=True] {
            border: 2px solid #0cc;
            width: 8px;
            height: 8px;
        }
        QWidget[class=workspace][ws_focused=True][ws_free=False] {
            border: 2px solid #0ee;
            background: #0aa;
            width: 8px;
            height: 8px;
        }
        QWidget[class=workspace][ws_urgent=True] {
            background: #dd4000;
            border: 2px solid #ffa000;
            width: 8px;
            height: 8px;
        }
        QWidget[class=icon] {
            margin-top: -2px;
            margin-bottom: -1px;
            font-size: 18px;
        }
        QWidget[active=False] {
            color: gray;
        }
        QWidget[class=wintitle] {
            margin-left: 8px;
        }
        ''')

        central_widget = QtWidgets.QWidget()
        QtWidgets.QHBoxLayout(central_widget, margin=0, spacing=0)
        self.setCentralWidget(central_widget)

        self.monitor_widgets = []
        for monitor in monitors:
            monitor_widget = QtWidgets.QWidget(size=QtCore.QSize(int(monitor.width), 0))
            QtWidgets.QHBoxLayout(monitor_widget, spacing=0, margin=0)
            subwidgets = []
            for class_name in ['left', 'right']:
                subwidget = QtWidgets.QWidget(size=QtCore.QSize(int(monitor.width) / 2.0, 0))
                subwidget.setProperty('class', class_name)
                FlowLayout(subwidget, spacing=0, margin=0, rtl=class_name == 'right')
                monitor_widget.layout().addWidget(subwidget)
                subwidgets.append(subwidget)
            monitor_widget.left_widget, monitor_widget.right_widget = subwidgets
            central_widget.layout().addWidget(monitor_widget)
            self.monitor_widgets.append(monitor_widget)

        self.trigger.connect(self.render)

    def render(self, renderer):
        renderer()

    def reloadStyleSheet(self):
        old_stylesheet = self.styleSheet()
        self.setStyleSheet('')
        self.setStyleSheet(old_stylesheet)

    def __len__(self):
        return len(self.monitor_widgets)

    def __getitem__(self, index):
        return self.monitor_widgets[index]

def main():
    app = QtWidgets.QApplication([os.fsencode(arg) for arg in sys.argv])
    monitors = WorkspacesProvider.get_monitors()
    main_window = MainWindow(monitors)

    providers = [
        WorkspacesProvider(main_window),
        WindowTitleProvider(main_window),
        MpdProvider(main_window),
        NetworkUsageProvider(main_window),
        BatteryProvider(main_window),
        CpuProvider(main_window),
        VolumeProvider(main_window),
        TimeProvider(main_window)
    ]

    def worker(provider, trigger):
        while True:
            provider.refresh()
            if provider.delay > 0:
                time.sleep(provider.delay)
            trigger.emit(provider.render)

    for provider in providers:
        t = threading.Thread(
            target=worker, args=(provider, main_window.trigger), daemon=True)
        t.start()

    signal.signal(signal.SIGINT, signal.SIG_DFL)
    app.exec_()

if __name__ == '__main__':
    main()
